
wiznetping.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000190  00800100  00000b7e  00000c12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800290  00800290  00000da2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000da2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e00  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000e40  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000ba2  00000000  00000000  00000ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000292  00000000  00000000  00001a4a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000481  00000000  00000000  00001cdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00002160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000273  00000000  00000000  00002380  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006af  00000000  00000000  000025f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000058  00000000  00000000  00002ca2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e7       	ldi	r30, 0x7E	; 126
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 39       	cpi	r26, 0x90	; 144
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a0 e9       	ldi	r26, 0x90	; 144
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 39       	cpi	r26, 0x96	; 150
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9c 02 	call	0x538	; 0x538 <main>
  9e:	0c 94 bd 05 	jmp	0xb7a	; 0xb7a <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putch>:

	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
}

int uart_putch(char ch,FILE *stream)
{
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
	if (ch == '\n')
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putch+0xe>
	uart_putch('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putch>

	while (!(UCSR0A & (1<<UDRE0)));
  b4:	e0 ec       	ldi	r30, 0xC0	; 192
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	90 81       	ld	r25, Z
  ba:	95 ff       	sbrs	r25, 5
  bc:	fd cf       	rjmp	.-6      	; 0xb8 <uart_putch+0x12>
	UDR0=ch;
  be:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	return 0;
}
  c2:	80 e0       	ldi	r24, 0x00	; 0
  c4:	90 e0       	ldi	r25, 0x00	; 0
  c6:	cf 91       	pop	r28
  c8:	08 95       	ret

000000ca <uart_getch>:

int uart_getch(FILE *stream)
{
  ca:	cf 93       	push	r28
  cc:	bc 01       	movw	r22, r24
	unsigned char ch;

	while (!(UCSR0A & (1<<RXC0)));
  ce:	e0 ec       	ldi	r30, 0xC0	; 192
  d0:	f0 e0       	ldi	r31, 0x00	; 0
  d2:	90 81       	ld	r25, Z
  d4:	99 23       	and	r25, r25
  d6:	ec f7       	brge	.-6      	; 0xd2 <uart_getch+0x8>
	ch=UDR0;
  d8:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	/* Echo the Output Back to terminal */
	uart_putch(ch,stream);
  dc:	8c 2f       	mov	r24, r28
  de:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putch>

	return ch;
}
  e2:	8c 2f       	mov	r24, r28
  e4:	90 e0       	ldi	r25, 0x00	; 0
  e6:	cf 91       	pop	r28
  e8:	08 95       	ret

000000ea <uart_init>:
#define RMSR 0x001A   // RX Memory Size Register
#define TMSR 0x001B   // TX Memory Size Register

void uart_init(void)
{
	UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;	// set baud rate
  ea:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
  ee:	83 e3       	ldi	r24, 0x33	; 51
  f0:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 		// enable Rx & Tx
  f4:	88 e1       	ldi	r24, 0x18	; 24
  f6:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C=  (1<<UCSZ01)|(1<<UCSZ00);  	    // config USART; 8N1
  fa:	86 e0       	ldi	r24, 0x06	; 6
  fc:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
 100:	08 95       	ret

00000102 <uart_flush>:

void uart_flush(void)
{
	unsigned char dummy;

	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
 102:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 106:	88 23       	and	r24, r24
 108:	44 f4       	brge	.+16     	; 0x11a <uart_flush+0x18>
 10a:	a6 ec       	ldi	r26, 0xC6	; 198
 10c:	b0 e0       	ldi	r27, 0x00	; 0
 10e:	e0 ec       	ldi	r30, 0xC0	; 192
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	8c 91       	ld	r24, X
 114:	80 81       	ld	r24, Z
 116:	88 23       	and	r24, r24
 118:	e4 f3       	brlt	.-8      	; 0x112 <uart_flush+0x10>
 11a:	08 95       	ret

0000011c <ansi_cl>:

	return ch;
}

void ansi_cl(void)
{
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
	// ANSI clear screen: cl=\E[H\E[J
	putchar(27);
 120:	c0 e9       	ldi	r28, 0x90	; 144
 122:	d2 e0       	ldi	r29, 0x02	; 2
 124:	6a 81       	ldd	r22, Y+2	; 0x02
 126:	7b 81       	ldd	r23, Y+3	; 0x03
 128:	8b e1       	ldi	r24, 0x1B	; 27
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
	putchar('[');
 130:	6a 81       	ldd	r22, Y+2	; 0x02
 132:	7b 81       	ldd	r23, Y+3	; 0x03
 134:	8b e5       	ldi	r24, 0x5B	; 91
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
	putchar('H');
 13c:	6a 81       	ldd	r22, Y+2	; 0x02
 13e:	7b 81       	ldd	r23, Y+3	; 0x03
 140:	88 e4       	ldi	r24, 0x48	; 72
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
	putchar(27);
 148:	6a 81       	ldd	r22, Y+2	; 0x02
 14a:	7b 81       	ldd	r23, Y+3	; 0x03
 14c:	8b e1       	ldi	r24, 0x1B	; 27
 14e:	90 e0       	ldi	r25, 0x00	; 0
 150:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
	putchar('[');
 154:	6a 81       	ldd	r22, Y+2	; 0x02
 156:	7b 81       	ldd	r23, Y+3	; 0x03
 158:	8b e5       	ldi	r24, 0x5B	; 91
 15a:	90 e0       	ldi	r25, 0x00	; 0
 15c:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
	putchar('J');
 160:	6a 81       	ldd	r22, Y+2	; 0x02
 162:	7b 81       	ldd	r23, Y+3	; 0x03
 164:	8a e4       	ldi	r24, 0x4A	; 74
 166:	90 e0       	ldi	r25, 0x00	; 0
 168:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
}
 16c:	df 91       	pop	r29
 16e:	cf 91       	pop	r28
 170:	08 95       	ret

00000172 <ansi_me>:

void ansi_me(void)
{
 172:	cf 93       	push	r28
 174:	df 93       	push	r29
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
 176:	c0 e9       	ldi	r28, 0x90	; 144
 178:	d2 e0       	ldi	r29, 0x02	; 2
 17a:	6a 81       	ldd	r22, Y+2	; 0x02
 17c:	7b 81       	ldd	r23, Y+3	; 0x03
 17e:	8b e1       	ldi	r24, 0x1B	; 27
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
	putchar('[');
 186:	6a 81       	ldd	r22, Y+2	; 0x02
 188:	7b 81       	ldd	r23, Y+3	; 0x03
 18a:	8b e5       	ldi	r24, 0x5B	; 91
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
	putchar('0');
 192:	6a 81       	ldd	r22, Y+2	; 0x02
 194:	7b 81       	ldd	r23, Y+3	; 0x03
 196:	80 e3       	ldi	r24, 0x30	; 48
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
	putchar('m');
 19e:	6a 81       	ldd	r22, Y+2	; 0x02
 1a0:	7b 81       	ldd	r23, Y+3	; 0x03
 1a2:	8d e6       	ldi	r24, 0x6D	; 109
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
}
 1aa:	df 91       	pop	r29
 1ac:	cf 91       	pop	r28
 1ae:	08 95       	ret

000001b0 <SPI_Write>:

void SPI_Write(unsigned int addr,unsigned char data)
{
	// Activate the CS pin
	SPI_PORT &= ~(1<<SPI_CS);
 1b0:	2a 98       	cbi	0x05, 2	; 5

	// Start Wiznet W5100 Write OpCode transmission
	SPDR = WIZNET_WRITE_OPCODE; // WIZNET_WRITE_OPCODE = 0xF0
 1b2:	20 ef       	ldi	r18, 0xF0	; 240
 1b4:	2e bd       	out	0x2e, r18	; 46

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 1b6:	0d b4       	in	r0, 0x2d	; 45
 1b8:	07 fe       	sbrs	r0, 7
 1ba:	fd cf       	rjmp	.-6      	; 0x1b6 <SPI_Write+0x6>

	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8; //0xFF00 = 0b1111111100000000 
 1bc:	9e bd       	out	0x2e, r25	; 46

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 1be:	0d b4       	in	r0, 0x2d	; 45
 1c0:	07 fe       	sbrs	r0, 7
 1c2:	fd cf       	rjmp	.-6      	; 0x1be <SPI_Write+0xe>

	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
 1c4:	8e bd       	out	0x2e, r24	; 46

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 1c6:	0d b4       	in	r0, 0x2d	; 45
 1c8:	07 fe       	sbrs	r0, 7
 1ca:	fd cf       	rjmp	.-6      	; 0x1c6 <SPI_Write+0x16>

	// Start Data transmission
	SPDR = data;
 1cc:	6e bd       	out	0x2e, r22	; 46

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 1ce:	0d b4       	in	r0, 0x2d	; 45
 1d0:	07 fe       	sbrs	r0, 7
 1d2:	fd cf       	rjmp	.-6      	; 0x1ce <SPI_Write+0x1e>

	// CS pin is not active
	SPI_PORT |= (1<<SPI_CS);
 1d4:	2a 9a       	sbi	0x05, 2	; 5
 1d6:	08 95       	ret

000001d8 <SPI_Read>:
}

unsigned char SPI_Read(unsigned int addr)
{
	// Activate the CS pin
	SPI_PORT &= ~(1<<SPI_CS);
 1d8:	2a 98       	cbi	0x05, 2	; 5

	// Start Wiznet W5100 Read OpCode transmission
	SPDR = WIZNET_READ_OPCODE;
 1da:	2f e0       	ldi	r18, 0x0F	; 15
 1dc:	2e bd       	out	0x2e, r18	; 46

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 1de:	0d b4       	in	r0, 0x2d	; 45
 1e0:	07 fe       	sbrs	r0, 7
 1e2:	fd cf       	rjmp	.-6      	; 0x1de <SPI_Read+0x6>

	// Start Wiznet W5100 Address High Bytes transmission
	SPDR = (addr & 0xFF00) >> 8;
 1e4:	9e bd       	out	0x2e, r25	; 46

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 1e6:	0d b4       	in	r0, 0x2d	; 45
 1e8:	07 fe       	sbrs	r0, 7
 1ea:	fd cf       	rjmp	.-6      	; 0x1e6 <SPI_Read+0xe>

	// Start Wiznet W5100 Address Low Bytes transmission
	SPDR = addr & 0x00FF;
 1ec:	8e bd       	out	0x2e, r24	; 46

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 1ee:	0d b4       	in	r0, 0x2d	; 45
 1f0:	07 fe       	sbrs	r0, 7
 1f2:	fd cf       	rjmp	.-6      	; 0x1ee <SPI_Read+0x16>

	// Send Dummy transmission for reading the data
	SPDR = 0x00;
 1f4:	1e bc       	out	0x2e, r1	; 46

	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
 1f6:	0d b4       	in	r0, 0x2d	; 45
 1f8:	07 fe       	sbrs	r0, 7
 1fa:	fd cf       	rjmp	.-6      	; 0x1f6 <SPI_Read+0x1e>

	// CS pin is not active
	SPI_PORT |= (1<<SPI_CS);
 1fc:	2a 9a       	sbi	0x05, 2	; 5

	return(SPDR);
 1fe:	8e b5       	in	r24, 0x2e	; 46
}
 200:	08 95       	ret

00000202 <W5100_Init>:

void W5100_Init(void)
{
 202:	df 92       	push	r13
 204:	ef 92       	push	r14
 206:	ff 92       	push	r15
 208:	0f 93       	push	r16
 20a:	1f 93       	push	r17
 20c:	cf 93       	push	r28
 20e:	df 93       	push	r29
	unsigned char ip_addr[] = {192,168,0,200};
	unsigned char sub_mask[] = {255,255,255,0};
	unsigned char gtw_addr[] = {192,168,0,1};

	// Setting the Wiznet W5100 Mode Register: 0x0000
	SPI_Write(MR,0x80);            // MR = 0b10000000;
 210:	60 e8       	ldi	r22, 0x80	; 128
 212:	80 e0       	ldi	r24, 0x00	; 0
 214:	90 e0       	ldi	r25, 0x00	; 0
 216:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	8f e9       	ldi	r24, 0x9F	; 159
 21c:	9f e0       	ldi	r25, 0x0F	; 15
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	f1 f7       	brne	.-4      	; 0x21e <W5100_Init+0x1c>
 222:	00 c0       	rjmp	.+0      	; 0x224 <W5100_Init+0x22>
 224:	00 00       	nop
	_delay_ms(1);
	printf("Reading MR: %d\n\n",SPI_Read(MR));
 226:	80 e0       	ldi	r24, 0x00	; 0
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 22e:	1f 92       	push	r1
 230:	8f 93       	push	r24
 232:	8e e0       	ldi	r24, 0x0E	; 14
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	9f 93       	push	r25
 238:	8f 93       	push	r24
 23a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>

	// Setting the Wiznet W5100 Gateway Address (GAR): 0x0001 to 0x0004
	printf("Setting Gateway Address %d.%d.%d.%d\n",gtw_addr[0],gtw_addr[1],\
 23e:	1f 92       	push	r1
 240:	81 e0       	ldi	r24, 0x01	; 1
 242:	8f 93       	push	r24
 244:	1f 92       	push	r1
 246:	1f 92       	push	r1
 248:	1f 92       	push	r1
 24a:	d8 ea       	ldi	r29, 0xA8	; 168
 24c:	df 93       	push	r29
 24e:	1f 92       	push	r1
 250:	c0 ec       	ldi	r28, 0xC0	; 192
 252:	cf 93       	push	r28
 254:	8f e1       	ldi	r24, 0x1F	; 31
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	9f 93       	push	r25
 25a:	8f 93       	push	r24
 25c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
	gtw_addr[2],gtw_addr[3]);
	SPI_Write(GAR + 0,gtw_addr[0]);
 260:	60 ec       	ldi	r22, 0xC0	; 192
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(GAR + 1,gtw_addr[1]);
 26a:	68 ea       	ldi	r22, 0xA8	; 168
 26c:	82 e0       	ldi	r24, 0x02	; 2
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(GAR + 2,gtw_addr[2]);
 274:	60 e0       	ldi	r22, 0x00	; 0
 276:	83 e0       	ldi	r24, 0x03	; 3
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(GAR + 3,gtw_addr[3]);
 27e:	61 e0       	ldi	r22, 0x01	; 1
 280:	84 e0       	ldi	r24, 0x04	; 4
 282:	90 e0       	ldi	r25, 0x00	; 0
 284:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
 288:	8f e9       	ldi	r24, 0x9F	; 159
 28a:	9f e0       	ldi	r25, 0x0F	; 15
 28c:	01 97       	sbiw	r24, 0x01	; 1
 28e:	f1 f7       	brne	.-4      	; 0x28c <W5100_Init+0x8a>
 290:	00 c0       	rjmp	.+0      	; 0x292 <W5100_Init+0x90>
 292:	00 00       	nop
	_delay_ms(1);

	printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_Read(GAR + 0),SPI_Read(GAR + 1),\
	SPI_Read(GAR + 2),SPI_Read(GAR + 3));
 294:	84 e0       	ldi	r24, 0x04	; 4
 296:	90 e0       	ldi	r25, 0x00	; 0
 298:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 29c:	f8 2e       	mov	r15, r24
 29e:	83 e0       	ldi	r24, 0x03	; 3
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 2a6:	08 2f       	mov	r16, r24
	SPI_Write(GAR + 1,gtw_addr[1]);
	SPI_Write(GAR + 2,gtw_addr[2]);
	SPI_Write(GAR + 3,gtw_addr[3]);
	_delay_ms(1);

	printf("Reading GAR: %d.%d.%d.%d\n\n",SPI_Read(GAR + 0),SPI_Read(GAR + 1),\
 2a8:	82 e0       	ldi	r24, 0x02	; 2
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 2b0:	18 2f       	mov	r17, r24
 2b2:	81 e0       	ldi	r24, 0x01	; 1
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 2ba:	1f 92       	push	r1
 2bc:	ff 92       	push	r15
 2be:	1f 92       	push	r1
 2c0:	0f 93       	push	r16
 2c2:	1f 92       	push	r1
 2c4:	1f 93       	push	r17
 2c6:	1f 92       	push	r1
 2c8:	8f 93       	push	r24
 2ca:	84 e4       	ldi	r24, 0x44	; 68
 2cc:	91 e0       	ldi	r25, 0x01	; 1
 2ce:	9f 93       	push	r25
 2d0:	8f 93       	push	r24
 2d2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
	SPI_Read(GAR + 2),SPI_Read(GAR + 3));

	// Setting the Wiznet W5100 Source Address Register (SAR): 0x0009 to 0x000E
	printf("Setting Source Address %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n",mac_addr[0],mac_addr[1],\
 2d6:	1f 92       	push	r1
 2d8:	8d ee       	ldi	r24, 0xED	; 237
 2da:	8f 93       	push	r24
 2dc:	1f 92       	push	r1
 2de:	86 e1       	ldi	r24, 0x16	; 22
 2e0:	8f 93       	push	r24
 2e2:	1f 92       	push	r1
 2e4:	8c ef       	ldi	r24, 0xFC	; 252
 2e6:	8f 93       	push	r24
 2e8:	1f 92       	push	r1
 2ea:	86 e3       	ldi	r24, 0x36	; 54
 2ec:	8f 93       	push	r24
 2ee:	1f 92       	push	r1
 2f0:	88 e9       	ldi	r24, 0x98	; 152
 2f2:	8f 93       	push	r24
 2f4:	1f 92       	push	r1
 2f6:	82 e8       	ldi	r24, 0x82	; 130
 2f8:	8f 93       	push	r24
 2fa:	8f e5       	ldi	r24, 0x5F	; 95
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	9f 93       	push	r25
 300:	8f 93       	push	r24
 302:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
	mac_addr[2],mac_addr[3],mac_addr[4],mac_addr[5]);
	SPI_Write(SAR + 0,mac_addr[0]);
 306:	8d b7       	in	r24, 0x3d	; 61
 308:	9e b7       	in	r25, 0x3e	; 62
 30a:	86 96       	adiw	r24, 0x26	; 38
 30c:	0f b6       	in	r0, 0x3f	; 63
 30e:	f8 94       	cli
 310:	9e bf       	out	0x3e, r25	; 62
 312:	0f be       	out	0x3f, r0	; 63
 314:	8d bf       	out	0x3d, r24	; 61
 316:	62 e8       	ldi	r22, 0x82	; 130
 318:	89 e0       	ldi	r24, 0x09	; 9
 31a:	90 e0       	ldi	r25, 0x00	; 0
 31c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(SAR + 1,mac_addr[1]);
 320:	68 e9       	ldi	r22, 0x98	; 152
 322:	8a e0       	ldi	r24, 0x0A	; 10
 324:	90 e0       	ldi	r25, 0x00	; 0
 326:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(SAR + 2,mac_addr[2]);
 32a:	66 e3       	ldi	r22, 0x36	; 54
 32c:	8b e0       	ldi	r24, 0x0B	; 11
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(SAR + 3,mac_addr[3]);
 334:	6c ef       	ldi	r22, 0xFC	; 252
 336:	8c e0       	ldi	r24, 0x0C	; 12
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(SAR + 4,mac_addr[4]);
 33e:	66 e1       	ldi	r22, 0x16	; 22
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(SAR + 5,mac_addr[5]);
 348:	6d ee       	ldi	r22, 0xED	; 237
 34a:	8e e0       	ldi	r24, 0x0E	; 14
 34c:	90 e0       	ldi	r25, 0x00	; 0
 34e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
 352:	8f e9       	ldi	r24, 0x9F	; 159
 354:	9f e0       	ldi	r25, 0x0F	; 15
 356:	01 97       	sbiw	r24, 0x01	; 1
 358:	f1 f7       	brne	.-4      	; 0x356 <W5100_Init+0x154>
 35a:	00 c0       	rjmp	.+0      	; 0x35c <W5100_Init+0x15a>
 35c:	00 00       	nop
	_delay_ms(1);

	printf("Reading SAR: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",SPI_Read(SAR + 0),SPI_Read(SAR + 1),\
	SPI_Read(SAR + 2),SPI_Read(SAR + 3),SPI_Read(SAR + 4),SPI_Read(SAR + 5));
 35e:	8e e0       	ldi	r24, 0x0E	; 14
 360:	90 e0       	ldi	r25, 0x00	; 0
 362:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 366:	d8 2e       	mov	r13, r24
 368:	8d e0       	ldi	r24, 0x0D	; 13
 36a:	90 e0       	ldi	r25, 0x00	; 0
 36c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 370:	e8 2e       	mov	r14, r24
 372:	8c e0       	ldi	r24, 0x0C	; 12
 374:	90 e0       	ldi	r25, 0x00	; 0
 376:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 37a:	f8 2e       	mov	r15, r24
 37c:	8b e0       	ldi	r24, 0x0B	; 11
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 384:	08 2f       	mov	r16, r24
	SPI_Write(SAR + 3,mac_addr[3]);
	SPI_Write(SAR + 4,mac_addr[4]);
	SPI_Write(SAR + 5,mac_addr[5]);
	_delay_ms(1);

	printf("Reading SAR: %.2x:%.2x:%.2x:%.2x:%.2x:%.2x\n\n",SPI_Read(SAR + 0),SPI_Read(SAR + 1),\
 386:	8a e0       	ldi	r24, 0x0A	; 10
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 38e:	18 2f       	mov	r17, r24
 390:	89 e0       	ldi	r24, 0x09	; 9
 392:	90 e0       	ldi	r25, 0x00	; 0
 394:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 398:	1f 92       	push	r1
 39a:	df 92       	push	r13
 39c:	1f 92       	push	r1
 39e:	ef 92       	push	r14
 3a0:	1f 92       	push	r1
 3a2:	ff 92       	push	r15
 3a4:	1f 92       	push	r1
 3a6:	0f 93       	push	r16
 3a8:	1f 92       	push	r1
 3aa:	1f 93       	push	r17
 3ac:	1f 92       	push	r1
 3ae:	8f 93       	push	r24
 3b0:	85 e9       	ldi	r24, 0x95	; 149
 3b2:	91 e0       	ldi	r25, 0x01	; 1
 3b4:	9f 93       	push	r25
 3b6:	8f 93       	push	r24
 3b8:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
	SPI_Read(SAR + 2),SPI_Read(SAR + 3),SPI_Read(SAR + 4),SPI_Read(SAR + 5));

	// Setting the Wiznet W5100 Sub Mask Address (SUBR): 0x0005 to 0x0008
	printf("Setting Sub Mask Address %d.%d.%d.%d\n",sub_mask[0],sub_mask[1],\
 3bc:	1f 92       	push	r1
 3be:	1f 92       	push	r1
 3c0:	1f 92       	push	r1
 3c2:	8f ef       	ldi	r24, 0xFF	; 255
 3c4:	8f 93       	push	r24
 3c6:	1f 92       	push	r1
 3c8:	8f 93       	push	r24
 3ca:	1f 92       	push	r1
 3cc:	8f 93       	push	r24
 3ce:	82 ec       	ldi	r24, 0xC2	; 194
 3d0:	91 e0       	ldi	r25, 0x01	; 1
 3d2:	9f 93       	push	r25
 3d4:	8f 93       	push	r24
 3d6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
	sub_mask[2],sub_mask[3]);
	SPI_Write(SUBR + 0,sub_mask[0]);
 3da:	6f ef       	ldi	r22, 0xFF	; 255
 3dc:	85 e0       	ldi	r24, 0x05	; 5
 3de:	90 e0       	ldi	r25, 0x00	; 0
 3e0:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(SUBR + 1,sub_mask[1]);
 3e4:	6f ef       	ldi	r22, 0xFF	; 255
 3e6:	86 e0       	ldi	r24, 0x06	; 6
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(SUBR + 2,sub_mask[2]);
 3ee:	6f ef       	ldi	r22, 0xFF	; 255
 3f0:	87 e0       	ldi	r24, 0x07	; 7
 3f2:	90 e0       	ldi	r25, 0x00	; 0
 3f4:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(SUBR + 3,sub_mask[3]);
 3f8:	60 e0       	ldi	r22, 0x00	; 0
 3fa:	88 e0       	ldi	r24, 0x08	; 8
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
 402:	8f e9       	ldi	r24, 0x9F	; 159
 404:	9f e0       	ldi	r25, 0x0F	; 15
 406:	01 97       	sbiw	r24, 0x01	; 1
 408:	f1 f7       	brne	.-4      	; 0x406 <__FUSE_REGION_LENGTH__+0x6>
 40a:	00 c0       	rjmp	.+0      	; 0x40c <__FUSE_REGION_LENGTH__+0xc>
 40c:	00 00       	nop
	_delay_ms(1);

	printf("Reading SUBR: %d.%d.%d.%d\n\n",SPI_Read(SUBR + 0),SPI_Read(SUBR + 1),\
	SPI_Read(SUBR + 2),SPI_Read(SUBR + 3));
 40e:	88 e0       	ldi	r24, 0x08	; 8
 410:	90 e0       	ldi	r25, 0x00	; 0
 412:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 416:	f8 2e       	mov	r15, r24
 418:	87 e0       	ldi	r24, 0x07	; 7
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 420:	08 2f       	mov	r16, r24
	SPI_Write(SUBR + 1,sub_mask[1]);
	SPI_Write(SUBR + 2,sub_mask[2]);
	SPI_Write(SUBR + 3,sub_mask[3]);
	_delay_ms(1);

	printf("Reading SUBR: %d.%d.%d.%d\n\n",SPI_Read(SUBR + 0),SPI_Read(SUBR + 1),\
 422:	86 e0       	ldi	r24, 0x06	; 6
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 42a:	18 2f       	mov	r17, r24
 42c:	85 e0       	ldi	r24, 0x05	; 5
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 434:	1f 92       	push	r1
 436:	ff 92       	push	r15
 438:	1f 92       	push	r1
 43a:	0f 93       	push	r16
 43c:	1f 92       	push	r1
 43e:	1f 93       	push	r17
 440:	1f 92       	push	r1
 442:	8f 93       	push	r24
 444:	88 ee       	ldi	r24, 0xE8	; 232
 446:	91 e0       	ldi	r25, 0x01	; 1
 448:	9f 93       	push	r25
 44a:	8f 93       	push	r24
 44c:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
	SPI_Read(SUBR + 2),SPI_Read(SUBR + 3));

	// Setting the Wiznet W5100 IP Address (SIPR): 0x000F to 0x0012
	printf("Setting IP Address %d.%d.%d.%d\n",ip_addr[0],ip_addr[1],\
 450:	8d b7       	in	r24, 0x3d	; 61
 452:	9e b7       	in	r25, 0x3e	; 62
 454:	82 96       	adiw	r24, 0x22	; 34
 456:	0f b6       	in	r0, 0x3f	; 63
 458:	f8 94       	cli
 45a:	9e bf       	out	0x3e, r25	; 62
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	8d bf       	out	0x3d, r24	; 61
 460:	1f 92       	push	r1
 462:	88 ec       	ldi	r24, 0xC8	; 200
 464:	8f 93       	push	r24
 466:	1f 92       	push	r1
 468:	1f 92       	push	r1
 46a:	1f 92       	push	r1
 46c:	df 93       	push	r29
 46e:	1f 92       	push	r1
 470:	cf 93       	push	r28
 472:	84 e0       	ldi	r24, 0x04	; 4
 474:	92 e0       	ldi	r25, 0x02	; 2
 476:	9f 93       	push	r25
 478:	8f 93       	push	r24
 47a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
	ip_addr[2],ip_addr[3]);
	SPI_Write(SIPR + 0,ip_addr[0]);
 47e:	60 ec       	ldi	r22, 0xC0	; 192
 480:	8f e0       	ldi	r24, 0x0F	; 15
 482:	90 e0       	ldi	r25, 0x00	; 0
 484:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(SIPR + 1,ip_addr[1]);
 488:	68 ea       	ldi	r22, 0xA8	; 168
 48a:	80 e1       	ldi	r24, 0x10	; 16
 48c:	90 e0       	ldi	r25, 0x00	; 0
 48e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(SIPR + 2,ip_addr[2]);
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	81 e1       	ldi	r24, 0x11	; 17
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(SIPR + 3,ip_addr[3]);
 49c:	68 ec       	ldi	r22, 0xC8	; 200
 49e:	82 e1       	ldi	r24, 0x12	; 18
 4a0:	90 e0       	ldi	r25, 0x00	; 0
 4a2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
 4a6:	8f e9       	ldi	r24, 0x9F	; 159
 4a8:	9f e0       	ldi	r25, 0x0F	; 15
 4aa:	01 97       	sbiw	r24, 0x01	; 1
 4ac:	f1 f7       	brne	.-4      	; 0x4aa <__FUSE_REGION_LENGTH__+0xaa>
 4ae:	00 c0       	rjmp	.+0      	; 0x4b0 <__FUSE_REGION_LENGTH__+0xb0>
 4b0:	00 00       	nop
	_delay_ms(1);

	printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),\
	SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));
 4b2:	82 e1       	ldi	r24, 0x12	; 18
 4b4:	90 e0       	ldi	r25, 0x00	; 0
 4b6:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 4ba:	18 2f       	mov	r17, r24
 4bc:	81 e1       	ldi	r24, 0x11	; 17
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 4c4:	d8 2f       	mov	r29, r24
	SPI_Write(SIPR + 1,ip_addr[1]);
	SPI_Write(SIPR + 2,ip_addr[2]);
	SPI_Write(SIPR + 3,ip_addr[3]);
	_delay_ms(1);

	printf("Reading SIPR: %d.%d.%d.%d\n\n",SPI_Read(SIPR + 0),SPI_Read(SIPR + 1),\
 4c6:	80 e1       	ldi	r24, 0x10	; 16
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 4ce:	c8 2f       	mov	r28, r24
 4d0:	8f e0       	ldi	r24, 0x0F	; 15
 4d2:	90 e0       	ldi	r25, 0x00	; 0
 4d4:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <SPI_Read>
 4d8:	1f 92       	push	r1
 4da:	1f 93       	push	r17
 4dc:	1f 92       	push	r1
 4de:	df 93       	push	r29
 4e0:	1f 92       	push	r1
 4e2:	cf 93       	push	r28
 4e4:	1f 92       	push	r1
 4e6:	8f 93       	push	r24
 4e8:	84 e2       	ldi	r24, 0x24	; 36
 4ea:	92 e0       	ldi	r25, 0x02	; 2
 4ec:	9f 93       	push	r25
 4ee:	8f 93       	push	r24
 4f0:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
	SPI_Read(SIPR + 2),SPI_Read(SIPR + 3));

	// Setting the Wiznet W5100 RX and TX Memory Size, we use 2KB for Rx/Tx 4 channels
	printf("Setting Wiznet RMSR and TMSR\n\n");
 4f4:	80 e4       	ldi	r24, 0x40	; 64
 4f6:	92 e0       	ldi	r25, 0x02	; 2
 4f8:	0e 94 10 03 	call	0x620	; 0x620 <puts>
	SPI_Write(RMSR,0x55);
 4fc:	65 e5       	ldi	r22, 0x55	; 85
 4fe:	8a e1       	ldi	r24, 0x1A	; 26
 500:	90 e0       	ldi	r25, 0x00	; 0
 502:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>
	SPI_Write(TMSR,0x55);
 506:	65 e5       	ldi	r22, 0x55	; 85
 508:	8b e1       	ldi	r24, 0x1B	; 27
 50a:	90 e0       	ldi	r25, 0x00	; 0
 50c:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <SPI_Write>

	printf("Done Wiznet W5100 Initialized!\n");
 510:	8e e5       	ldi	r24, 0x5E	; 94
 512:	92 e0       	ldi	r25, 0x02	; 2
 514:	0e 94 10 03 	call	0x620	; 0x620 <puts>
 518:	8d b7       	in	r24, 0x3d	; 61
 51a:	9e b7       	in	r25, 0x3e	; 62
 51c:	44 96       	adiw	r24, 0x14	; 20
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	f8 94       	cli
 522:	9e bf       	out	0x3e, r25	; 62
 524:	0f be       	out	0x3f, r0	; 63
 526:	8d bf       	out	0x3d, r24	; 61
}
 528:	df 91       	pop	r29
 52a:	cf 91       	pop	r28
 52c:	1f 91       	pop	r17
 52e:	0f 91       	pop	r16
 530:	ff 90       	pop	r15
 532:	ef 90       	pop	r14
 534:	df 90       	pop	r13
 536:	08 95       	ret

00000538 <main>:
// Assign I/O stream to UART
FILE uart_str = FDEV_SETUP_STREAM(uart_putch, uart_getch, _FDEV_SETUP_RW);

int main(void){
	// Set the PORTD as Output:
	DDRD=0xFF;
 538:	8f ef       	ldi	r24, 0xFF	; 255
 53a:	8a b9       	out	0x0a, r24	; 10
	PORTD=0x00;
 53c:	1b b8       	out	0x0b, r1	; 11

	// Define Output/Input Stream
	stdout = stdin = &uart_str;
 53e:	e0 e9       	ldi	r30, 0x90	; 144
 540:	f2 e0       	ldi	r31, 0x02	; 2
 542:	80 e0       	ldi	r24, 0x00	; 0
 544:	91 e0       	ldi	r25, 0x01	; 1
 546:	91 83       	std	Z+1, r25	; 0x01
 548:	80 83       	st	Z, r24
 54a:	93 83       	std	Z+3, r25	; 0x03
 54c:	82 83       	std	Z+2, r24	; 0x02

	// Initial UART Peripheral
	uart_init();
 54e:	0e 94 75 00 	call	0xea	; 0xea <uart_init>

	// Clear Screen
	ansi_me();
 552:	0e 94 b9 00 	call	0x172	; 0x172 <ansi_me>
	ansi_cl();
 556:	0e 94 8e 00 	call	0x11c	; 0x11c <ansi_cl>
	ansi_me();
 55a:	0e 94 b9 00 	call	0x172	; 0x172 <ansi_me>
	ansi_cl();
 55e:	0e 94 8e 00 	call	0x11c	; 0x11c <ansi_cl>
	uart_flush();
 562:	0e 94 81 00 	call	0x102	; 0x102 <uart_flush>

	// Initial the AVR ATMega168/328 SPI Peripheral
	// Set MOSI (PORTB3),SCK (PORTB5) and PORTB2 (SS) as output, others as input
	SPI_DDR = (1<<PORTB3)|(1<<PORTB5)|(1<<PORTB2);
 566:	8c e2       	ldi	r24, 0x2C	; 44
 568:	84 b9       	out	0x04, r24	; 4

	// CS pin is not active
	SPI_PORT |= (1<<SPI_CS);
 56a:	2a 9a       	sbi	0x05, 2	; 5

	// Enable SPI, Master Mode 0, set the clock rate fosc/2 = 8Mhz
	SPCR = (1<<SPE)|(1<<MSTR);
 56c:	80 e5       	ldi	r24, 0x50	; 80
 56e:	8c bd       	out	0x2c, r24	; 44
	SPSR |= (1<<SPI2X);
 570:	8d b5       	in	r24, 0x2d	; 45
 572:	81 60       	ori	r24, 0x01	; 1
 574:	8d bd       	out	0x2d, r24	; 45

	// Initial the Wiznet W5100
	printf("Wiznet W5100 Init\n\n");
 576:	8d e7       	ldi	r24, 0x7D	; 125
 578:	92 e0       	ldi	r25, 0x02	; 2
 57a:	0e 94 10 03 	call	0x620	; 0x620 <puts>
	W5100_Init();
 57e:	0e 94 01 01 	call	0x202	; 0x202 <W5100_Init>

	// Loop forever
	for(;;){
	}
 582:	ff cf       	rjmp	.-2      	; 0x582 <main+0x4a>

00000584 <fputc>:
 584:	0f 93       	push	r16
 586:	1f 93       	push	r17
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	fb 01       	movw	r30, r22
 58e:	23 81       	ldd	r18, Z+3	; 0x03
 590:	21 fd       	sbrc	r18, 1
 592:	03 c0       	rjmp	.+6      	; 0x59a <fputc+0x16>
 594:	8f ef       	ldi	r24, 0xFF	; 255
 596:	9f ef       	ldi	r25, 0xFF	; 255
 598:	28 c0       	rjmp	.+80     	; 0x5ea <fputc+0x66>
 59a:	22 ff       	sbrs	r18, 2
 59c:	16 c0       	rjmp	.+44     	; 0x5ca <fputc+0x46>
 59e:	46 81       	ldd	r20, Z+6	; 0x06
 5a0:	57 81       	ldd	r21, Z+7	; 0x07
 5a2:	24 81       	ldd	r18, Z+4	; 0x04
 5a4:	35 81       	ldd	r19, Z+5	; 0x05
 5a6:	42 17       	cp	r20, r18
 5a8:	53 07       	cpc	r21, r19
 5aa:	44 f4       	brge	.+16     	; 0x5bc <fputc+0x38>
 5ac:	a0 81       	ld	r26, Z
 5ae:	b1 81       	ldd	r27, Z+1	; 0x01
 5b0:	9d 01       	movw	r18, r26
 5b2:	2f 5f       	subi	r18, 0xFF	; 255
 5b4:	3f 4f       	sbci	r19, 0xFF	; 255
 5b6:	31 83       	std	Z+1, r19	; 0x01
 5b8:	20 83       	st	Z, r18
 5ba:	8c 93       	st	X, r24
 5bc:	26 81       	ldd	r18, Z+6	; 0x06
 5be:	37 81       	ldd	r19, Z+7	; 0x07
 5c0:	2f 5f       	subi	r18, 0xFF	; 255
 5c2:	3f 4f       	sbci	r19, 0xFF	; 255
 5c4:	37 83       	std	Z+7, r19	; 0x07
 5c6:	26 83       	std	Z+6, r18	; 0x06
 5c8:	10 c0       	rjmp	.+32     	; 0x5ea <fputc+0x66>
 5ca:	eb 01       	movw	r28, r22
 5cc:	09 2f       	mov	r16, r25
 5ce:	18 2f       	mov	r17, r24
 5d0:	00 84       	ldd	r0, Z+8	; 0x08
 5d2:	f1 85       	ldd	r31, Z+9	; 0x09
 5d4:	e0 2d       	mov	r30, r0
 5d6:	09 95       	icall
 5d8:	89 2b       	or	r24, r25
 5da:	e1 f6       	brne	.-72     	; 0x594 <fputc+0x10>
 5dc:	8e 81       	ldd	r24, Y+6	; 0x06
 5de:	9f 81       	ldd	r25, Y+7	; 0x07
 5e0:	01 96       	adiw	r24, 0x01	; 1
 5e2:	9f 83       	std	Y+7, r25	; 0x07
 5e4:	8e 83       	std	Y+6, r24	; 0x06
 5e6:	81 2f       	mov	r24, r17
 5e8:	90 2f       	mov	r25, r16
 5ea:	df 91       	pop	r29
 5ec:	cf 91       	pop	r28
 5ee:	1f 91       	pop	r17
 5f0:	0f 91       	pop	r16
 5f2:	08 95       	ret

000005f4 <printf>:
 5f4:	a0 e0       	ldi	r26, 0x00	; 0
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	e0 e0       	ldi	r30, 0x00	; 0
 5fa:	f3 e0       	ldi	r31, 0x03	; 3
 5fc:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__prologue_saves__+0x20>
 600:	ae 01       	movw	r20, r28
 602:	4b 5f       	subi	r20, 0xFB	; 251
 604:	5f 4f       	sbci	r21, 0xFF	; 255
 606:	fa 01       	movw	r30, r20
 608:	61 91       	ld	r22, Z+
 60a:	71 91       	ld	r23, Z+
 60c:	af 01       	movw	r20, r30
 60e:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <__data_end+0x2>
 612:	90 91 93 02 	lds	r25, 0x0293	; 0x800293 <__data_end+0x3>
 616:	0e 94 40 03 	call	0x680	; 0x680 <vfprintf>
 61a:	e2 e0       	ldi	r30, 0x02	; 2
 61c:	0c 94 b2 05 	jmp	0xb64	; 0xb64 <__epilogue_restores__+0x20>

00000620 <puts>:
 620:	0f 93       	push	r16
 622:	1f 93       	push	r17
 624:	cf 93       	push	r28
 626:	df 93       	push	r29
 628:	e0 91 92 02 	lds	r30, 0x0292	; 0x800292 <__data_end+0x2>
 62c:	f0 91 93 02 	lds	r31, 0x0293	; 0x800293 <__data_end+0x3>
 630:	23 81       	ldd	r18, Z+3	; 0x03
 632:	21 ff       	sbrs	r18, 1
 634:	1b c0       	rjmp	.+54     	; 0x66c <puts+0x4c>
 636:	8c 01       	movw	r16, r24
 638:	d0 e0       	ldi	r29, 0x00	; 0
 63a:	c0 e0       	ldi	r28, 0x00	; 0
 63c:	f8 01       	movw	r30, r16
 63e:	81 91       	ld	r24, Z+
 640:	8f 01       	movw	r16, r30
 642:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <__data_end+0x2>
 646:	70 91 93 02 	lds	r23, 0x0293	; 0x800293 <__data_end+0x3>
 64a:	db 01       	movw	r26, r22
 64c:	18 96       	adiw	r26, 0x08	; 8
 64e:	ed 91       	ld	r30, X+
 650:	fc 91       	ld	r31, X
 652:	19 97       	sbiw	r26, 0x09	; 9
 654:	88 23       	and	r24, r24
 656:	31 f0       	breq	.+12     	; 0x664 <puts+0x44>
 658:	09 95       	icall
 65a:	89 2b       	or	r24, r25
 65c:	79 f3       	breq	.-34     	; 0x63c <puts+0x1c>
 65e:	df ef       	ldi	r29, 0xFF	; 255
 660:	cf ef       	ldi	r28, 0xFF	; 255
 662:	ec cf       	rjmp	.-40     	; 0x63c <puts+0x1c>
 664:	8a e0       	ldi	r24, 0x0A	; 10
 666:	09 95       	icall
 668:	89 2b       	or	r24, r25
 66a:	19 f0       	breq	.+6      	; 0x672 <puts+0x52>
 66c:	8f ef       	ldi	r24, 0xFF	; 255
 66e:	9f ef       	ldi	r25, 0xFF	; 255
 670:	02 c0       	rjmp	.+4      	; 0x676 <puts+0x56>
 672:	8d 2f       	mov	r24, r29
 674:	9c 2f       	mov	r25, r28
 676:	df 91       	pop	r29
 678:	cf 91       	pop	r28
 67a:	1f 91       	pop	r17
 67c:	0f 91       	pop	r16
 67e:	08 95       	ret

00000680 <vfprintf>:
 680:	ac e0       	ldi	r26, 0x0C	; 12
 682:	b0 e0       	ldi	r27, 0x00	; 0
 684:	e6 e4       	ldi	r30, 0x46	; 70
 686:	f3 e0       	ldi	r31, 0x03	; 3
 688:	0c 94 86 05 	jmp	0xb0c	; 0xb0c <__prologue_saves__>
 68c:	7c 01       	movw	r14, r24
 68e:	6b 01       	movw	r12, r22
 690:	8a 01       	movw	r16, r20
 692:	fc 01       	movw	r30, r24
 694:	17 82       	std	Z+7, r1	; 0x07
 696:	16 82       	std	Z+6, r1	; 0x06
 698:	83 81       	ldd	r24, Z+3	; 0x03
 69a:	81 ff       	sbrs	r24, 1
 69c:	bd c1       	rjmp	.+890    	; 0xa18 <__stack+0x119>
 69e:	ce 01       	movw	r24, r28
 6a0:	01 96       	adiw	r24, 0x01	; 1
 6a2:	4c 01       	movw	r8, r24
 6a4:	f7 01       	movw	r30, r14
 6a6:	93 81       	ldd	r25, Z+3	; 0x03
 6a8:	f6 01       	movw	r30, r12
 6aa:	93 fd       	sbrc	r25, 3
 6ac:	85 91       	lpm	r24, Z+
 6ae:	93 ff       	sbrs	r25, 3
 6b0:	81 91       	ld	r24, Z+
 6b2:	6f 01       	movw	r12, r30
 6b4:	88 23       	and	r24, r24
 6b6:	09 f4       	brne	.+2      	; 0x6ba <vfprintf+0x3a>
 6b8:	ab c1       	rjmp	.+854    	; 0xa10 <__stack+0x111>
 6ba:	85 32       	cpi	r24, 0x25	; 37
 6bc:	39 f4       	brne	.+14     	; 0x6cc <vfprintf+0x4c>
 6be:	93 fd       	sbrc	r25, 3
 6c0:	85 91       	lpm	r24, Z+
 6c2:	93 ff       	sbrs	r25, 3
 6c4:	81 91       	ld	r24, Z+
 6c6:	6f 01       	movw	r12, r30
 6c8:	85 32       	cpi	r24, 0x25	; 37
 6ca:	29 f4       	brne	.+10     	; 0x6d6 <vfprintf+0x56>
 6cc:	b7 01       	movw	r22, r14
 6ce:	90 e0       	ldi	r25, 0x00	; 0
 6d0:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
 6d4:	e7 cf       	rjmp	.-50     	; 0x6a4 <vfprintf+0x24>
 6d6:	51 2c       	mov	r5, r1
 6d8:	31 2c       	mov	r3, r1
 6da:	20 e0       	ldi	r18, 0x00	; 0
 6dc:	20 32       	cpi	r18, 0x20	; 32
 6de:	a0 f4       	brcc	.+40     	; 0x708 <vfprintf+0x88>
 6e0:	8b 32       	cpi	r24, 0x2B	; 43
 6e2:	69 f0       	breq	.+26     	; 0x6fe <vfprintf+0x7e>
 6e4:	30 f4       	brcc	.+12     	; 0x6f2 <vfprintf+0x72>
 6e6:	80 32       	cpi	r24, 0x20	; 32
 6e8:	59 f0       	breq	.+22     	; 0x700 <vfprintf+0x80>
 6ea:	83 32       	cpi	r24, 0x23	; 35
 6ec:	69 f4       	brne	.+26     	; 0x708 <vfprintf+0x88>
 6ee:	20 61       	ori	r18, 0x10	; 16
 6f0:	2c c0       	rjmp	.+88     	; 0x74a <vfprintf+0xca>
 6f2:	8d 32       	cpi	r24, 0x2D	; 45
 6f4:	39 f0       	breq	.+14     	; 0x704 <vfprintf+0x84>
 6f6:	80 33       	cpi	r24, 0x30	; 48
 6f8:	39 f4       	brne	.+14     	; 0x708 <vfprintf+0x88>
 6fa:	21 60       	ori	r18, 0x01	; 1
 6fc:	26 c0       	rjmp	.+76     	; 0x74a <vfprintf+0xca>
 6fe:	22 60       	ori	r18, 0x02	; 2
 700:	24 60       	ori	r18, 0x04	; 4
 702:	23 c0       	rjmp	.+70     	; 0x74a <vfprintf+0xca>
 704:	28 60       	ori	r18, 0x08	; 8
 706:	21 c0       	rjmp	.+66     	; 0x74a <vfprintf+0xca>
 708:	27 fd       	sbrc	r18, 7
 70a:	27 c0       	rjmp	.+78     	; 0x75a <vfprintf+0xda>
 70c:	30 ed       	ldi	r19, 0xD0	; 208
 70e:	38 0f       	add	r19, r24
 710:	3a 30       	cpi	r19, 0x0A	; 10
 712:	78 f4       	brcc	.+30     	; 0x732 <vfprintf+0xb2>
 714:	26 ff       	sbrs	r18, 6
 716:	06 c0       	rjmp	.+12     	; 0x724 <vfprintf+0xa4>
 718:	fa e0       	ldi	r31, 0x0A	; 10
 71a:	5f 9e       	mul	r5, r31
 71c:	30 0d       	add	r19, r0
 71e:	11 24       	eor	r1, r1
 720:	53 2e       	mov	r5, r19
 722:	13 c0       	rjmp	.+38     	; 0x74a <vfprintf+0xca>
 724:	8a e0       	ldi	r24, 0x0A	; 10
 726:	38 9e       	mul	r3, r24
 728:	30 0d       	add	r19, r0
 72a:	11 24       	eor	r1, r1
 72c:	33 2e       	mov	r3, r19
 72e:	20 62       	ori	r18, 0x20	; 32
 730:	0c c0       	rjmp	.+24     	; 0x74a <vfprintf+0xca>
 732:	8e 32       	cpi	r24, 0x2E	; 46
 734:	21 f4       	brne	.+8      	; 0x73e <vfprintf+0xbe>
 736:	26 fd       	sbrc	r18, 6
 738:	6b c1       	rjmp	.+726    	; 0xa10 <__stack+0x111>
 73a:	20 64       	ori	r18, 0x40	; 64
 73c:	06 c0       	rjmp	.+12     	; 0x74a <vfprintf+0xca>
 73e:	8c 36       	cpi	r24, 0x6C	; 108
 740:	11 f4       	brne	.+4      	; 0x746 <vfprintf+0xc6>
 742:	20 68       	ori	r18, 0x80	; 128
 744:	02 c0       	rjmp	.+4      	; 0x74a <vfprintf+0xca>
 746:	88 36       	cpi	r24, 0x68	; 104
 748:	41 f4       	brne	.+16     	; 0x75a <vfprintf+0xda>
 74a:	f6 01       	movw	r30, r12
 74c:	93 fd       	sbrc	r25, 3
 74e:	85 91       	lpm	r24, Z+
 750:	93 ff       	sbrs	r25, 3
 752:	81 91       	ld	r24, Z+
 754:	6f 01       	movw	r12, r30
 756:	81 11       	cpse	r24, r1
 758:	c1 cf       	rjmp	.-126    	; 0x6dc <vfprintf+0x5c>
 75a:	98 2f       	mov	r25, r24
 75c:	9f 7d       	andi	r25, 0xDF	; 223
 75e:	95 54       	subi	r25, 0x45	; 69
 760:	93 30       	cpi	r25, 0x03	; 3
 762:	28 f4       	brcc	.+10     	; 0x76e <vfprintf+0xee>
 764:	0c 5f       	subi	r16, 0xFC	; 252
 766:	1f 4f       	sbci	r17, 0xFF	; 255
 768:	ff e3       	ldi	r31, 0x3F	; 63
 76a:	f9 83       	std	Y+1, r31	; 0x01
 76c:	0d c0       	rjmp	.+26     	; 0x788 <vfprintf+0x108>
 76e:	83 36       	cpi	r24, 0x63	; 99
 770:	31 f0       	breq	.+12     	; 0x77e <vfprintf+0xfe>
 772:	83 37       	cpi	r24, 0x73	; 115
 774:	71 f0       	breq	.+28     	; 0x792 <vfprintf+0x112>
 776:	83 35       	cpi	r24, 0x53	; 83
 778:	09 f0       	breq	.+2      	; 0x77c <vfprintf+0xfc>
 77a:	5b c0       	rjmp	.+182    	; 0x832 <vfprintf+0x1b2>
 77c:	22 c0       	rjmp	.+68     	; 0x7c2 <vfprintf+0x142>
 77e:	f8 01       	movw	r30, r16
 780:	80 81       	ld	r24, Z
 782:	89 83       	std	Y+1, r24	; 0x01
 784:	0e 5f       	subi	r16, 0xFE	; 254
 786:	1f 4f       	sbci	r17, 0xFF	; 255
 788:	44 24       	eor	r4, r4
 78a:	43 94       	inc	r4
 78c:	51 2c       	mov	r5, r1
 78e:	54 01       	movw	r10, r8
 790:	15 c0       	rjmp	.+42     	; 0x7bc <vfprintf+0x13c>
 792:	38 01       	movw	r6, r16
 794:	f2 e0       	ldi	r31, 0x02	; 2
 796:	6f 0e       	add	r6, r31
 798:	71 1c       	adc	r7, r1
 79a:	f8 01       	movw	r30, r16
 79c:	a0 80       	ld	r10, Z
 79e:	b1 80       	ldd	r11, Z+1	; 0x01
 7a0:	26 ff       	sbrs	r18, 6
 7a2:	03 c0       	rjmp	.+6      	; 0x7aa <vfprintf+0x12a>
 7a4:	65 2d       	mov	r22, r5
 7a6:	70 e0       	ldi	r23, 0x00	; 0
 7a8:	02 c0       	rjmp	.+4      	; 0x7ae <vfprintf+0x12e>
 7aa:	6f ef       	ldi	r22, 0xFF	; 255
 7ac:	7f ef       	ldi	r23, 0xFF	; 255
 7ae:	c5 01       	movw	r24, r10
 7b0:	2c 87       	std	Y+12, r18	; 0x0c
 7b2:	0e 94 1d 05 	call	0xa3a	; 0xa3a <strnlen>
 7b6:	2c 01       	movw	r4, r24
 7b8:	83 01       	movw	r16, r6
 7ba:	2c 85       	ldd	r18, Y+12	; 0x0c
 7bc:	2f 77       	andi	r18, 0x7F	; 127
 7be:	22 2e       	mov	r2, r18
 7c0:	17 c0       	rjmp	.+46     	; 0x7f0 <vfprintf+0x170>
 7c2:	38 01       	movw	r6, r16
 7c4:	f2 e0       	ldi	r31, 0x02	; 2
 7c6:	6f 0e       	add	r6, r31
 7c8:	71 1c       	adc	r7, r1
 7ca:	f8 01       	movw	r30, r16
 7cc:	a0 80       	ld	r10, Z
 7ce:	b1 80       	ldd	r11, Z+1	; 0x01
 7d0:	26 ff       	sbrs	r18, 6
 7d2:	03 c0       	rjmp	.+6      	; 0x7da <vfprintf+0x15a>
 7d4:	65 2d       	mov	r22, r5
 7d6:	70 e0       	ldi	r23, 0x00	; 0
 7d8:	02 c0       	rjmp	.+4      	; 0x7de <vfprintf+0x15e>
 7da:	6f ef       	ldi	r22, 0xFF	; 255
 7dc:	7f ef       	ldi	r23, 0xFF	; 255
 7de:	c5 01       	movw	r24, r10
 7e0:	2c 87       	std	Y+12, r18	; 0x0c
 7e2:	0e 94 12 05 	call	0xa24	; 0xa24 <strnlen_P>
 7e6:	2c 01       	movw	r4, r24
 7e8:	2c 85       	ldd	r18, Y+12	; 0x0c
 7ea:	20 68       	ori	r18, 0x80	; 128
 7ec:	22 2e       	mov	r2, r18
 7ee:	83 01       	movw	r16, r6
 7f0:	23 fc       	sbrc	r2, 3
 7f2:	1b c0       	rjmp	.+54     	; 0x82a <vfprintf+0x1aa>
 7f4:	83 2d       	mov	r24, r3
 7f6:	90 e0       	ldi	r25, 0x00	; 0
 7f8:	48 16       	cp	r4, r24
 7fa:	59 06       	cpc	r5, r25
 7fc:	b0 f4       	brcc	.+44     	; 0x82a <vfprintf+0x1aa>
 7fe:	b7 01       	movw	r22, r14
 800:	80 e2       	ldi	r24, 0x20	; 32
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
 808:	3a 94       	dec	r3
 80a:	f4 cf       	rjmp	.-24     	; 0x7f4 <vfprintf+0x174>
 80c:	f5 01       	movw	r30, r10
 80e:	27 fc       	sbrc	r2, 7
 810:	85 91       	lpm	r24, Z+
 812:	27 fe       	sbrs	r2, 7
 814:	81 91       	ld	r24, Z+
 816:	5f 01       	movw	r10, r30
 818:	b7 01       	movw	r22, r14
 81a:	90 e0       	ldi	r25, 0x00	; 0
 81c:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
 820:	31 10       	cpse	r3, r1
 822:	3a 94       	dec	r3
 824:	f1 e0       	ldi	r31, 0x01	; 1
 826:	4f 1a       	sub	r4, r31
 828:	51 08       	sbc	r5, r1
 82a:	41 14       	cp	r4, r1
 82c:	51 04       	cpc	r5, r1
 82e:	71 f7       	brne	.-36     	; 0x80c <vfprintf+0x18c>
 830:	e5 c0       	rjmp	.+458    	; 0x9fc <__stack+0xfd>
 832:	84 36       	cpi	r24, 0x64	; 100
 834:	11 f0       	breq	.+4      	; 0x83a <vfprintf+0x1ba>
 836:	89 36       	cpi	r24, 0x69	; 105
 838:	39 f5       	brne	.+78     	; 0x888 <vfprintf+0x208>
 83a:	f8 01       	movw	r30, r16
 83c:	27 ff       	sbrs	r18, 7
 83e:	07 c0       	rjmp	.+14     	; 0x84e <vfprintf+0x1ce>
 840:	60 81       	ld	r22, Z
 842:	71 81       	ldd	r23, Z+1	; 0x01
 844:	82 81       	ldd	r24, Z+2	; 0x02
 846:	93 81       	ldd	r25, Z+3	; 0x03
 848:	0c 5f       	subi	r16, 0xFC	; 252
 84a:	1f 4f       	sbci	r17, 0xFF	; 255
 84c:	08 c0       	rjmp	.+16     	; 0x85e <vfprintf+0x1de>
 84e:	60 81       	ld	r22, Z
 850:	71 81       	ldd	r23, Z+1	; 0x01
 852:	07 2e       	mov	r0, r23
 854:	00 0c       	add	r0, r0
 856:	88 0b       	sbc	r24, r24
 858:	99 0b       	sbc	r25, r25
 85a:	0e 5f       	subi	r16, 0xFE	; 254
 85c:	1f 4f       	sbci	r17, 0xFF	; 255
 85e:	2f 76       	andi	r18, 0x6F	; 111
 860:	72 2e       	mov	r7, r18
 862:	97 ff       	sbrs	r25, 7
 864:	09 c0       	rjmp	.+18     	; 0x878 <vfprintf+0x1f8>
 866:	90 95       	com	r25
 868:	80 95       	com	r24
 86a:	70 95       	com	r23
 86c:	61 95       	neg	r22
 86e:	7f 4f       	sbci	r23, 0xFF	; 255
 870:	8f 4f       	sbci	r24, 0xFF	; 255
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	20 68       	ori	r18, 0x80	; 128
 876:	72 2e       	mov	r7, r18
 878:	2a e0       	ldi	r18, 0x0A	; 10
 87a:	30 e0       	ldi	r19, 0x00	; 0
 87c:	a4 01       	movw	r20, r8
 87e:	0e 94 28 05 	call	0xa50	; 0xa50 <__ultoa_invert>
 882:	a8 2e       	mov	r10, r24
 884:	a8 18       	sub	r10, r8
 886:	44 c0       	rjmp	.+136    	; 0x910 <__stack+0x11>
 888:	85 37       	cpi	r24, 0x75	; 117
 88a:	29 f4       	brne	.+10     	; 0x896 <vfprintf+0x216>
 88c:	2f 7e       	andi	r18, 0xEF	; 239
 88e:	b2 2e       	mov	r11, r18
 890:	2a e0       	ldi	r18, 0x0A	; 10
 892:	30 e0       	ldi	r19, 0x00	; 0
 894:	25 c0       	rjmp	.+74     	; 0x8e0 <vfprintf+0x260>
 896:	f2 2f       	mov	r31, r18
 898:	f9 7f       	andi	r31, 0xF9	; 249
 89a:	bf 2e       	mov	r11, r31
 89c:	8f 36       	cpi	r24, 0x6F	; 111
 89e:	c1 f0       	breq	.+48     	; 0x8d0 <vfprintf+0x250>
 8a0:	18 f4       	brcc	.+6      	; 0x8a8 <vfprintf+0x228>
 8a2:	88 35       	cpi	r24, 0x58	; 88
 8a4:	79 f0       	breq	.+30     	; 0x8c4 <vfprintf+0x244>
 8a6:	b4 c0       	rjmp	.+360    	; 0xa10 <__stack+0x111>
 8a8:	80 37       	cpi	r24, 0x70	; 112
 8aa:	19 f0       	breq	.+6      	; 0x8b2 <vfprintf+0x232>
 8ac:	88 37       	cpi	r24, 0x78	; 120
 8ae:	21 f0       	breq	.+8      	; 0x8b8 <vfprintf+0x238>
 8b0:	af c0       	rjmp	.+350    	; 0xa10 <__stack+0x111>
 8b2:	2f 2f       	mov	r18, r31
 8b4:	20 61       	ori	r18, 0x10	; 16
 8b6:	b2 2e       	mov	r11, r18
 8b8:	b4 fe       	sbrs	r11, 4
 8ba:	0d c0       	rjmp	.+26     	; 0x8d6 <vfprintf+0x256>
 8bc:	8b 2d       	mov	r24, r11
 8be:	84 60       	ori	r24, 0x04	; 4
 8c0:	b8 2e       	mov	r11, r24
 8c2:	09 c0       	rjmp	.+18     	; 0x8d6 <vfprintf+0x256>
 8c4:	24 ff       	sbrs	r18, 4
 8c6:	0a c0       	rjmp	.+20     	; 0x8dc <vfprintf+0x25c>
 8c8:	9f 2f       	mov	r25, r31
 8ca:	96 60       	ori	r25, 0x06	; 6
 8cc:	b9 2e       	mov	r11, r25
 8ce:	06 c0       	rjmp	.+12     	; 0x8dc <vfprintf+0x25c>
 8d0:	28 e0       	ldi	r18, 0x08	; 8
 8d2:	30 e0       	ldi	r19, 0x00	; 0
 8d4:	05 c0       	rjmp	.+10     	; 0x8e0 <vfprintf+0x260>
 8d6:	20 e1       	ldi	r18, 0x10	; 16
 8d8:	30 e0       	ldi	r19, 0x00	; 0
 8da:	02 c0       	rjmp	.+4      	; 0x8e0 <vfprintf+0x260>
 8dc:	20 e1       	ldi	r18, 0x10	; 16
 8de:	32 e0       	ldi	r19, 0x02	; 2
 8e0:	f8 01       	movw	r30, r16
 8e2:	b7 fe       	sbrs	r11, 7
 8e4:	07 c0       	rjmp	.+14     	; 0x8f4 <vfprintf+0x274>
 8e6:	60 81       	ld	r22, Z
 8e8:	71 81       	ldd	r23, Z+1	; 0x01
 8ea:	82 81       	ldd	r24, Z+2	; 0x02
 8ec:	93 81       	ldd	r25, Z+3	; 0x03
 8ee:	0c 5f       	subi	r16, 0xFC	; 252
 8f0:	1f 4f       	sbci	r17, 0xFF	; 255
 8f2:	06 c0       	rjmp	.+12     	; 0x900 <__stack+0x1>
 8f4:	60 81       	ld	r22, Z
 8f6:	71 81       	ldd	r23, Z+1	; 0x01
 8f8:	80 e0       	ldi	r24, 0x00	; 0
 8fa:	90 e0       	ldi	r25, 0x00	; 0
 8fc:	0e 5f       	subi	r16, 0xFE	; 254
 8fe:	1f 4f       	sbci	r17, 0xFF	; 255
 900:	a4 01       	movw	r20, r8
 902:	0e 94 28 05 	call	0xa50	; 0xa50 <__ultoa_invert>
 906:	a8 2e       	mov	r10, r24
 908:	a8 18       	sub	r10, r8
 90a:	fb 2d       	mov	r31, r11
 90c:	ff 77       	andi	r31, 0x7F	; 127
 90e:	7f 2e       	mov	r7, r31
 910:	76 fe       	sbrs	r7, 6
 912:	0b c0       	rjmp	.+22     	; 0x92a <__stack+0x2b>
 914:	37 2d       	mov	r19, r7
 916:	3e 7f       	andi	r19, 0xFE	; 254
 918:	a5 14       	cp	r10, r5
 91a:	50 f4       	brcc	.+20     	; 0x930 <__stack+0x31>
 91c:	74 fe       	sbrs	r7, 4
 91e:	0a c0       	rjmp	.+20     	; 0x934 <__stack+0x35>
 920:	72 fc       	sbrc	r7, 2
 922:	08 c0       	rjmp	.+16     	; 0x934 <__stack+0x35>
 924:	37 2d       	mov	r19, r7
 926:	3e 7e       	andi	r19, 0xEE	; 238
 928:	05 c0       	rjmp	.+10     	; 0x934 <__stack+0x35>
 92a:	ba 2c       	mov	r11, r10
 92c:	37 2d       	mov	r19, r7
 92e:	03 c0       	rjmp	.+6      	; 0x936 <__stack+0x37>
 930:	ba 2c       	mov	r11, r10
 932:	01 c0       	rjmp	.+2      	; 0x936 <__stack+0x37>
 934:	b5 2c       	mov	r11, r5
 936:	34 ff       	sbrs	r19, 4
 938:	0d c0       	rjmp	.+26     	; 0x954 <__stack+0x55>
 93a:	fe 01       	movw	r30, r28
 93c:	ea 0d       	add	r30, r10
 93e:	f1 1d       	adc	r31, r1
 940:	80 81       	ld	r24, Z
 942:	80 33       	cpi	r24, 0x30	; 48
 944:	11 f4       	brne	.+4      	; 0x94a <__stack+0x4b>
 946:	39 7e       	andi	r19, 0xE9	; 233
 948:	09 c0       	rjmp	.+18     	; 0x95c <__stack+0x5d>
 94a:	32 ff       	sbrs	r19, 2
 94c:	06 c0       	rjmp	.+12     	; 0x95a <__stack+0x5b>
 94e:	b3 94       	inc	r11
 950:	b3 94       	inc	r11
 952:	04 c0       	rjmp	.+8      	; 0x95c <__stack+0x5d>
 954:	83 2f       	mov	r24, r19
 956:	86 78       	andi	r24, 0x86	; 134
 958:	09 f0       	breq	.+2      	; 0x95c <__stack+0x5d>
 95a:	b3 94       	inc	r11
 95c:	33 fd       	sbrc	r19, 3
 95e:	13 c0       	rjmp	.+38     	; 0x986 <__stack+0x87>
 960:	30 ff       	sbrs	r19, 0
 962:	06 c0       	rjmp	.+12     	; 0x970 <__stack+0x71>
 964:	5a 2c       	mov	r5, r10
 966:	b3 14       	cp	r11, r3
 968:	18 f4       	brcc	.+6      	; 0x970 <__stack+0x71>
 96a:	53 0c       	add	r5, r3
 96c:	5b 18       	sub	r5, r11
 96e:	b3 2c       	mov	r11, r3
 970:	b3 14       	cp	r11, r3
 972:	68 f4       	brcc	.+26     	; 0x98e <__stack+0x8f>
 974:	b7 01       	movw	r22, r14
 976:	80 e2       	ldi	r24, 0x20	; 32
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	3c 87       	std	Y+12, r19	; 0x0c
 97c:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
 980:	b3 94       	inc	r11
 982:	3c 85       	ldd	r19, Y+12	; 0x0c
 984:	f5 cf       	rjmp	.-22     	; 0x970 <__stack+0x71>
 986:	b3 14       	cp	r11, r3
 988:	10 f4       	brcc	.+4      	; 0x98e <__stack+0x8f>
 98a:	3b 18       	sub	r3, r11
 98c:	01 c0       	rjmp	.+2      	; 0x990 <__stack+0x91>
 98e:	31 2c       	mov	r3, r1
 990:	34 ff       	sbrs	r19, 4
 992:	12 c0       	rjmp	.+36     	; 0x9b8 <__stack+0xb9>
 994:	b7 01       	movw	r22, r14
 996:	80 e3       	ldi	r24, 0x30	; 48
 998:	90 e0       	ldi	r25, 0x00	; 0
 99a:	3c 87       	std	Y+12, r19	; 0x0c
 99c:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
 9a0:	3c 85       	ldd	r19, Y+12	; 0x0c
 9a2:	32 ff       	sbrs	r19, 2
 9a4:	17 c0       	rjmp	.+46     	; 0x9d4 <__stack+0xd5>
 9a6:	31 fd       	sbrc	r19, 1
 9a8:	03 c0       	rjmp	.+6      	; 0x9b0 <__stack+0xb1>
 9aa:	88 e7       	ldi	r24, 0x78	; 120
 9ac:	90 e0       	ldi	r25, 0x00	; 0
 9ae:	02 c0       	rjmp	.+4      	; 0x9b4 <__stack+0xb5>
 9b0:	88 e5       	ldi	r24, 0x58	; 88
 9b2:	90 e0       	ldi	r25, 0x00	; 0
 9b4:	b7 01       	movw	r22, r14
 9b6:	0c c0       	rjmp	.+24     	; 0x9d0 <__stack+0xd1>
 9b8:	83 2f       	mov	r24, r19
 9ba:	86 78       	andi	r24, 0x86	; 134
 9bc:	59 f0       	breq	.+22     	; 0x9d4 <__stack+0xd5>
 9be:	31 ff       	sbrs	r19, 1
 9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <__stack+0xc7>
 9c2:	8b e2       	ldi	r24, 0x2B	; 43
 9c4:	01 c0       	rjmp	.+2      	; 0x9c8 <__stack+0xc9>
 9c6:	80 e2       	ldi	r24, 0x20	; 32
 9c8:	37 fd       	sbrc	r19, 7
 9ca:	8d e2       	ldi	r24, 0x2D	; 45
 9cc:	b7 01       	movw	r22, r14
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
 9d4:	a5 14       	cp	r10, r5
 9d6:	38 f4       	brcc	.+14     	; 0x9e6 <__stack+0xe7>
 9d8:	b7 01       	movw	r22, r14
 9da:	80 e3       	ldi	r24, 0x30	; 48
 9dc:	90 e0       	ldi	r25, 0x00	; 0
 9de:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
 9e2:	5a 94       	dec	r5
 9e4:	f7 cf       	rjmp	.-18     	; 0x9d4 <__stack+0xd5>
 9e6:	aa 94       	dec	r10
 9e8:	f4 01       	movw	r30, r8
 9ea:	ea 0d       	add	r30, r10
 9ec:	f1 1d       	adc	r31, r1
 9ee:	80 81       	ld	r24, Z
 9f0:	b7 01       	movw	r22, r14
 9f2:	90 e0       	ldi	r25, 0x00	; 0
 9f4:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
 9f8:	a1 10       	cpse	r10, r1
 9fa:	f5 cf       	rjmp	.-22     	; 0x9e6 <__stack+0xe7>
 9fc:	33 20       	and	r3, r3
 9fe:	09 f4       	brne	.+2      	; 0xa02 <__stack+0x103>
 a00:	51 ce       	rjmp	.-862    	; 0x6a4 <vfprintf+0x24>
 a02:	b7 01       	movw	r22, r14
 a04:	80 e2       	ldi	r24, 0x20	; 32
 a06:	90 e0       	ldi	r25, 0x00	; 0
 a08:	0e 94 c2 02 	call	0x584	; 0x584 <fputc>
 a0c:	3a 94       	dec	r3
 a0e:	f6 cf       	rjmp	.-20     	; 0x9fc <__stack+0xfd>
 a10:	f7 01       	movw	r30, r14
 a12:	86 81       	ldd	r24, Z+6	; 0x06
 a14:	97 81       	ldd	r25, Z+7	; 0x07
 a16:	02 c0       	rjmp	.+4      	; 0xa1c <__stack+0x11d>
 a18:	8f ef       	ldi	r24, 0xFF	; 255
 a1a:	9f ef       	ldi	r25, 0xFF	; 255
 a1c:	2c 96       	adiw	r28, 0x0c	; 12
 a1e:	e2 e1       	ldi	r30, 0x12	; 18
 a20:	0c 94 a2 05 	jmp	0xb44	; 0xb44 <__epilogue_restores__>

00000a24 <strnlen_P>:
 a24:	fc 01       	movw	r30, r24
 a26:	05 90       	lpm	r0, Z+
 a28:	61 50       	subi	r22, 0x01	; 1
 a2a:	70 40       	sbci	r23, 0x00	; 0
 a2c:	01 10       	cpse	r0, r1
 a2e:	d8 f7       	brcc	.-10     	; 0xa26 <strnlen_P+0x2>
 a30:	80 95       	com	r24
 a32:	90 95       	com	r25
 a34:	8e 0f       	add	r24, r30
 a36:	9f 1f       	adc	r25, r31
 a38:	08 95       	ret

00000a3a <strnlen>:
 a3a:	fc 01       	movw	r30, r24
 a3c:	61 50       	subi	r22, 0x01	; 1
 a3e:	70 40       	sbci	r23, 0x00	; 0
 a40:	01 90       	ld	r0, Z+
 a42:	01 10       	cpse	r0, r1
 a44:	d8 f7       	brcc	.-10     	; 0xa3c <strnlen+0x2>
 a46:	80 95       	com	r24
 a48:	90 95       	com	r25
 a4a:	8e 0f       	add	r24, r30
 a4c:	9f 1f       	adc	r25, r31
 a4e:	08 95       	ret

00000a50 <__ultoa_invert>:
 a50:	fa 01       	movw	r30, r20
 a52:	aa 27       	eor	r26, r26
 a54:	28 30       	cpi	r18, 0x08	; 8
 a56:	51 f1       	breq	.+84     	; 0xaac <__ultoa_invert+0x5c>
 a58:	20 31       	cpi	r18, 0x10	; 16
 a5a:	81 f1       	breq	.+96     	; 0xabc <__ultoa_invert+0x6c>
 a5c:	e8 94       	clt
 a5e:	6f 93       	push	r22
 a60:	6e 7f       	andi	r22, 0xFE	; 254
 a62:	6e 5f       	subi	r22, 0xFE	; 254
 a64:	7f 4f       	sbci	r23, 0xFF	; 255
 a66:	8f 4f       	sbci	r24, 0xFF	; 255
 a68:	9f 4f       	sbci	r25, 0xFF	; 255
 a6a:	af 4f       	sbci	r26, 0xFF	; 255
 a6c:	b1 e0       	ldi	r27, 0x01	; 1
 a6e:	3e d0       	rcall	.+124    	; 0xaec <__ultoa_invert+0x9c>
 a70:	b4 e0       	ldi	r27, 0x04	; 4
 a72:	3c d0       	rcall	.+120    	; 0xaec <__ultoa_invert+0x9c>
 a74:	67 0f       	add	r22, r23
 a76:	78 1f       	adc	r23, r24
 a78:	89 1f       	adc	r24, r25
 a7a:	9a 1f       	adc	r25, r26
 a7c:	a1 1d       	adc	r26, r1
 a7e:	68 0f       	add	r22, r24
 a80:	79 1f       	adc	r23, r25
 a82:	8a 1f       	adc	r24, r26
 a84:	91 1d       	adc	r25, r1
 a86:	a1 1d       	adc	r26, r1
 a88:	6a 0f       	add	r22, r26
 a8a:	71 1d       	adc	r23, r1
 a8c:	81 1d       	adc	r24, r1
 a8e:	91 1d       	adc	r25, r1
 a90:	a1 1d       	adc	r26, r1
 a92:	20 d0       	rcall	.+64     	; 0xad4 <__ultoa_invert+0x84>
 a94:	09 f4       	brne	.+2      	; 0xa98 <__ultoa_invert+0x48>
 a96:	68 94       	set
 a98:	3f 91       	pop	r19
 a9a:	2a e0       	ldi	r18, 0x0A	; 10
 a9c:	26 9f       	mul	r18, r22
 a9e:	11 24       	eor	r1, r1
 aa0:	30 19       	sub	r19, r0
 aa2:	30 5d       	subi	r19, 0xD0	; 208
 aa4:	31 93       	st	Z+, r19
 aa6:	de f6       	brtc	.-74     	; 0xa5e <__ultoa_invert+0xe>
 aa8:	cf 01       	movw	r24, r30
 aaa:	08 95       	ret
 aac:	46 2f       	mov	r20, r22
 aae:	47 70       	andi	r20, 0x07	; 7
 ab0:	40 5d       	subi	r20, 0xD0	; 208
 ab2:	41 93       	st	Z+, r20
 ab4:	b3 e0       	ldi	r27, 0x03	; 3
 ab6:	0f d0       	rcall	.+30     	; 0xad6 <__ultoa_invert+0x86>
 ab8:	c9 f7       	brne	.-14     	; 0xaac <__ultoa_invert+0x5c>
 aba:	f6 cf       	rjmp	.-20     	; 0xaa8 <__ultoa_invert+0x58>
 abc:	46 2f       	mov	r20, r22
 abe:	4f 70       	andi	r20, 0x0F	; 15
 ac0:	40 5d       	subi	r20, 0xD0	; 208
 ac2:	4a 33       	cpi	r20, 0x3A	; 58
 ac4:	18 f0       	brcs	.+6      	; 0xacc <__ultoa_invert+0x7c>
 ac6:	49 5d       	subi	r20, 0xD9	; 217
 ac8:	31 fd       	sbrc	r19, 1
 aca:	40 52       	subi	r20, 0x20	; 32
 acc:	41 93       	st	Z+, r20
 ace:	02 d0       	rcall	.+4      	; 0xad4 <__ultoa_invert+0x84>
 ad0:	a9 f7       	brne	.-22     	; 0xabc <__ultoa_invert+0x6c>
 ad2:	ea cf       	rjmp	.-44     	; 0xaa8 <__ultoa_invert+0x58>
 ad4:	b4 e0       	ldi	r27, 0x04	; 4
 ad6:	a6 95       	lsr	r26
 ad8:	97 95       	ror	r25
 ada:	87 95       	ror	r24
 adc:	77 95       	ror	r23
 ade:	67 95       	ror	r22
 ae0:	ba 95       	dec	r27
 ae2:	c9 f7       	brne	.-14     	; 0xad6 <__ultoa_invert+0x86>
 ae4:	00 97       	sbiw	r24, 0x00	; 0
 ae6:	61 05       	cpc	r22, r1
 ae8:	71 05       	cpc	r23, r1
 aea:	08 95       	ret
 aec:	9b 01       	movw	r18, r22
 aee:	ac 01       	movw	r20, r24
 af0:	0a 2e       	mov	r0, r26
 af2:	06 94       	lsr	r0
 af4:	57 95       	ror	r21
 af6:	47 95       	ror	r20
 af8:	37 95       	ror	r19
 afa:	27 95       	ror	r18
 afc:	ba 95       	dec	r27
 afe:	c9 f7       	brne	.-14     	; 0xaf2 <__ultoa_invert+0xa2>
 b00:	62 0f       	add	r22, r18
 b02:	73 1f       	adc	r23, r19
 b04:	84 1f       	adc	r24, r20
 b06:	95 1f       	adc	r25, r21
 b08:	a0 1d       	adc	r26, r0
 b0a:	08 95       	ret

00000b0c <__prologue_saves__>:
 b0c:	2f 92       	push	r2
 b0e:	3f 92       	push	r3
 b10:	4f 92       	push	r4
 b12:	5f 92       	push	r5
 b14:	6f 92       	push	r6
 b16:	7f 92       	push	r7
 b18:	8f 92       	push	r8
 b1a:	9f 92       	push	r9
 b1c:	af 92       	push	r10
 b1e:	bf 92       	push	r11
 b20:	cf 92       	push	r12
 b22:	df 92       	push	r13
 b24:	ef 92       	push	r14
 b26:	ff 92       	push	r15
 b28:	0f 93       	push	r16
 b2a:	1f 93       	push	r17
 b2c:	cf 93       	push	r28
 b2e:	df 93       	push	r29
 b30:	cd b7       	in	r28, 0x3d	; 61
 b32:	de b7       	in	r29, 0x3e	; 62
 b34:	ca 1b       	sub	r28, r26
 b36:	db 0b       	sbc	r29, r27
 b38:	0f b6       	in	r0, 0x3f	; 63
 b3a:	f8 94       	cli
 b3c:	de bf       	out	0x3e, r29	; 62
 b3e:	0f be       	out	0x3f, r0	; 63
 b40:	cd bf       	out	0x3d, r28	; 61
 b42:	09 94       	ijmp

00000b44 <__epilogue_restores__>:
 b44:	2a 88       	ldd	r2, Y+18	; 0x12
 b46:	39 88       	ldd	r3, Y+17	; 0x11
 b48:	48 88       	ldd	r4, Y+16	; 0x10
 b4a:	5f 84       	ldd	r5, Y+15	; 0x0f
 b4c:	6e 84       	ldd	r6, Y+14	; 0x0e
 b4e:	7d 84       	ldd	r7, Y+13	; 0x0d
 b50:	8c 84       	ldd	r8, Y+12	; 0x0c
 b52:	9b 84       	ldd	r9, Y+11	; 0x0b
 b54:	aa 84       	ldd	r10, Y+10	; 0x0a
 b56:	b9 84       	ldd	r11, Y+9	; 0x09
 b58:	c8 84       	ldd	r12, Y+8	; 0x08
 b5a:	df 80       	ldd	r13, Y+7	; 0x07
 b5c:	ee 80       	ldd	r14, Y+6	; 0x06
 b5e:	fd 80       	ldd	r15, Y+5	; 0x05
 b60:	0c 81       	ldd	r16, Y+4	; 0x04
 b62:	1b 81       	ldd	r17, Y+3	; 0x03
 b64:	aa 81       	ldd	r26, Y+2	; 0x02
 b66:	b9 81       	ldd	r27, Y+1	; 0x01
 b68:	ce 0f       	add	r28, r30
 b6a:	d1 1d       	adc	r29, r1
 b6c:	0f b6       	in	r0, 0x3f	; 63
 b6e:	f8 94       	cli
 b70:	de bf       	out	0x3e, r29	; 62
 b72:	0f be       	out	0x3f, r0	; 63
 b74:	cd bf       	out	0x3d, r28	; 61
 b76:	ed 01       	movw	r28, r26
 b78:	08 95       	ret

00000b7a <_exit>:
 b7a:	f8 94       	cli

00000b7c <__stop_program>:
 b7c:	ff cf       	rjmp	.-2      	; 0xb7c <__stop_program>


SD_READ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001b6  00800100  000013c8  0000145c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000003f  008002b6  008002b6  00001612  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001612  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001670  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  000016b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001087  00000000  00000000  00001780  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ea  00000000  00000000  00002807  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009f2  00000000  00000000  00002df1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  000037e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004b3  00000000  00000000  00003c28  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001294  00000000  00000000  000040db  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  0000536f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	e8 ec       	ldi	r30, 0xC8	; 200
      7c:	f3 e1       	ldi	r31, 0x13	; 19
      7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0
      84:	a6 3b       	cpi	r26, 0xB6	; 182
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
      8a:	22 e0       	ldi	r18, 0x02	; 2
      8c:	a6 eb       	ldi	r26, 0xB6	; 182
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	a5 3f       	cpi	r26, 0xF5	; 245
      96:	b2 07       	cpc	r27, r18
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 49 04 	call	0x892	; 0x892 <main>
      9e:	0c 94 e2 09 	jmp	0x13c4	; 0x13c4 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <fat16_init>:

// Initialize the library - locates the first FAT16 partition,
// loads the relevant part of its boot sector to calculate
// values needed for operation, and finally positions the
// file reading routines to the start of root directory entries
char fat16_init() {
      a6:	8f 92       	push	r8
      a8:	9f 92       	push	r9
      aa:	af 92       	push	r10
      ac:	bf 92       	push	r11
      ae:	cf 92       	push	r12
      b0:	df 92       	push	r13
      b2:	ef 92       	push	r14
      b4:	ff 92       	push	r15
      b6:	0f 93       	push	r16
      b8:	1f 93       	push	r17
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
    unsigned int i;
    unsigned long root_start;
   
   //GO TO PARTIOTION TABLE ADDRESS 
    fat16_seek(0x1BE);
      be:	6e eb       	ldi	r22, 0xBE	; 190
      c0:	71 e0       	ldi	r23, 0x01	; 1
      c2:	80 e0       	ldi	r24, 0x00	; 0
      c4:	90 e0       	ldi	r25, 0x00	; 0
      c6:	0e 94 63 06 	call	0xcc6	; 0xcc6 <fat16_seek>
   
   
    for(i=0; i<4; i++) {        
      ca:	c0 e0       	ldi	r28, 0x00	; 0
      cc:	d0 e0       	ldi	r29, 0x00	; 0
        fat16_read(sizeof(PartitionTable));
       
        if(FAT16_part->partition_type == 4 || 
      ce:	06 eb       	ldi	r16, 0xB6	; 182
      d0:	12 e0       	ldi	r17, 0x02	; 2
   //GO TO PARTIOTION TABLE ADDRESS 
    fat16_seek(0x1BE);
   
   
    for(i=0; i<4; i++) {        
        fat16_read(sizeof(PartitionTable));
      d2:	80 e1       	ldi	r24, 0x10	; 16
      d4:	0e 94 80 06 	call	0xd00	; 0xd00 <fat16_read>
       
        if(FAT16_part->partition_type == 4 || 
      d8:	f8 01       	movw	r30, r16
      da:	84 81       	ldd	r24, Z+4	; 0x04
      dc:	98 2f       	mov	r25, r24
      de:	9d 7f       	andi	r25, 0xFD	; 253
      e0:	94 30       	cpi	r25, 0x04	; 4
      e2:	41 f0       	breq	.+16     	; 0xf4 <fat16_init+0x4e>
           FAT16_part->partition_type == 6 ||
      e4:	8e 30       	cpi	r24, 0x0E	; 14
      e6:	31 f0       	breq	.+12     	; 0xf4 <fat16_init+0x4e>
   
   //GO TO PARTIOTION TABLE ADDRESS 
    fat16_seek(0x1BE);
   
   
    for(i=0; i<4; i++) {        
      e8:	21 96       	adiw	r28, 0x01	; 1
      ea:	c4 30       	cpi	r28, 0x04	; 4
      ec:	d1 05       	cpc	r29, r1
      ee:	89 f7       	brne	.-30     	; 0xd2 <fat16_init+0x2c>
           FAT16_part->partition_type == 14)
            break;
    }
    
    if(i == 4) // none of the partitions were FAT16
        return FAT16_ERR_NO_PARTITION_FOUND;
      f0:	8f ef       	ldi	r24, 0xFF	; 255
      f2:	52 c1       	rjmp	.+676    	; 0x398 <fat16_init+0x2f2>
           FAT16_part->partition_type == 6 ||
           FAT16_part->partition_type == 14)
            break;
    }
    
    if(i == 4) // none of the partitions were FAT16
      f4:	24 97       	sbiw	r28, 0x04	; 4
      f6:	09 f4       	brne	.+2      	; 0xfa <fat16_init+0x54>
      f8:	4c c1       	rjmp	.+664    	; 0x392 <fat16_init+0x2ec>
        return FAT16_ERR_NO_PARTITION_FOUND;
    
	printf("PARTITION TABLE BUFFER\n");
      fa:	8e e0       	ldi	r24, 0x0E	; 14
      fc:	91 e0       	ldi	r25, 0x01	; 1
      fe:	0e 94 35 07 	call	0xe6a	; 0xe6a <puts>
     102:	06 eb       	ldi	r16, 0xB6	; 182
     104:	12 e0       	ldi	r17, 0x02	; 2
     106:	0f 2e       	mov	r0, r31
     108:	f6 ec       	ldi	r31, 0xC6	; 198
     10a:	cf 2e       	mov	r12, r31
     10c:	f2 e0       	ldi	r31, 0x02	; 2
     10e:	df 2e       	mov	r13, r31
     110:	f0 2d       	mov	r31, r0
     112:	e8 01       	movw	r28, r16
	for(i=0; i<sizeof(PartitionTable); i++){
		printf("%X",fat16_buffer[i]);
     114:	0f 2e       	mov	r0, r31
     116:	f5 e2       	ldi	r31, 0x25	; 37
     118:	ef 2e       	mov	r14, r31
     11a:	f1 e0       	ldi	r31, 0x01	; 1
     11c:	ff 2e       	mov	r15, r31
     11e:	f0 2d       	mov	r31, r0
     120:	89 91       	ld	r24, Y+
     122:	1f 92       	push	r1
     124:	8f 93       	push	r24
     126:	ff 92       	push	r15
     128:	ef 92       	push	r14
     12a:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
    
    if(i == 4) // none of the partitions were FAT16
        return FAT16_ERR_NO_PARTITION_FOUND;
    
	printf("PARTITION TABLE BUFFER\n");
	for(i=0; i<sizeof(PartitionTable); i++){
     12e:	0f 90       	pop	r0
     130:	0f 90       	pop	r0
     132:	0f 90       	pop	r0
     134:	0f 90       	pop	r0
     136:	cc 15       	cp	r28, r12
     138:	dd 05       	cpc	r29, r13
     13a:	91 f7       	brne	.-28     	; 0x120 <fat16_init+0x7a>
		printf("%X",fat16_buffer[i]);
	}
	 
    fat16_state.fat_start = 512 * (FAT16_part->start_sector); // temporary
     13c:	80 91 be 02 	lds	r24, 0x02BE	; 0x8002be <__data_end+0x8>
     140:	90 91 bf 02 	lds	r25, 0x02BF	; 0x8002bf <__data_end+0x9>
     144:	a0 91 c0 02 	lds	r26, 0x02C0	; 0x8002c0 <__data_end+0xa>
     148:	b0 91 c1 02 	lds	r27, 0x02C1	; 0x8002c1 <__data_end+0xb>
     14c:	c6 ed       	ldi	r28, 0xD6	; 214
     14e:	d2 e0       	ldi	r29, 0x02	; 2
     150:	ac 01       	movw	r20, r24
     152:	bd 01       	movw	r22, r26
     154:	03 2e       	mov	r0, r19
     156:	39 e0       	ldi	r19, 0x09	; 9
     158:	44 0f       	add	r20, r20
     15a:	55 1f       	adc	r21, r21
     15c:	66 1f       	adc	r22, r22
     15e:	77 1f       	adc	r23, r23
     160:	3a 95       	dec	r19
     162:	d1 f7       	brne	.-12     	; 0x158 <fat16_init+0xb2>
     164:	30 2d       	mov	r19, r0
     166:	48 83       	st	Y, r20
     168:	59 83       	std	Y+1, r21	; 0x01
     16a:	6a 83       	std	Y+2, r22	; 0x02
     16c:	7b 83       	std	Y+3, r23	; 0x03
	
	printf("\nStart Sector %#08X",((unsigned int)FAT16_part->start_sector));
     16e:	9f 93       	push	r25
     170:	8f 93       	push	r24
     172:	88 e2       	ldi	r24, 0x28	; 40
     174:	91 e0       	ldi	r25, 0x01	; 1
     176:	9f 93       	push	r25
     178:	8f 93       	push	r24
     17a:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>

    fat16_seek(fat16_state.fat_start + FAT16_BOOT_OFFSET);
     17e:	88 81       	ld	r24, Y
     180:	99 81       	ldd	r25, Y+1	; 0x01
     182:	aa 81       	ldd	r26, Y+2	; 0x02
     184:	bb 81       	ldd	r27, Y+3	; 0x03
     186:	bc 01       	movw	r22, r24
     188:	cd 01       	movw	r24, r26
     18a:	65 5f       	subi	r22, 0xF5	; 245
     18c:	7f 4f       	sbci	r23, 0xFF	; 255
     18e:	8f 4f       	sbci	r24, 0xFF	; 255
     190:	9f 4f       	sbci	r25, 0xFF	; 255
     192:	0e 94 63 06 	call	0xcc6	; 0xcc6 <fat16_seek>
    fat16_read(sizeof(Fat16BootSectorFragment));
     196:	8d e0       	ldi	r24, 0x0D	; 13
     198:	0e 94 80 06 	call	0xd00	; 0xd00 <fat16_read>
    
	
	printf("BOOT BUFFER\n");
     19c:	8c e3       	ldi	r24, 0x3C	; 60
     19e:	91 e0       	ldi	r25, 0x01	; 1
     1a0:	0e 94 35 07 	call	0xe6a	; 0xe6a <puts>
     1a4:	0f 2e       	mov	r0, r31
     1a6:	f3 ec       	ldi	r31, 0xC3	; 195
     1a8:	ef 2e       	mov	r14, r31
     1aa:	f2 e0       	ldi	r31, 0x02	; 2
     1ac:	ff 2e       	mov	r15, r31
     1ae:	f0 2d       	mov	r31, r0
     1b0:	0f 90       	pop	r0
     1b2:	0f 90       	pop	r0
     1b4:	0f 90       	pop	r0
     1b6:	0f 90       	pop	r0
    for(i=0; i<sizeof(Fat16BootSectorFragment); i++){
	printf("%X",fat16_buffer[i]);
     1b8:	c5 e2       	ldi	r28, 0x25	; 37
     1ba:	d1 e0       	ldi	r29, 0x01	; 1
     1bc:	f8 01       	movw	r30, r16
     1be:	81 91       	ld	r24, Z+
     1c0:	8f 01       	movw	r16, r30
     1c2:	1f 92       	push	r1
     1c4:	8f 93       	push	r24
     1c6:	df 93       	push	r29
     1c8:	cf 93       	push	r28
     1ca:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
    fat16_seek(fat16_state.fat_start + FAT16_BOOT_OFFSET);
    fat16_read(sizeof(Fat16BootSectorFragment));
    
	
	printf("BOOT BUFFER\n");
    for(i=0; i<sizeof(Fat16BootSectorFragment); i++){
     1ce:	0f 90       	pop	r0
     1d0:	0f 90       	pop	r0
     1d2:	0f 90       	pop	r0
     1d4:	0f 90       	pop	r0
     1d6:	0e 15       	cp	r16, r14
     1d8:	1f 05       	cpc	r17, r15
     1da:	81 f7       	brne	.-32     	; 0x1bc <fat16_init+0x116>
	printf("%X",fat16_buffer[i]);
	}
	printf("\n");
     1dc:	8a e0       	ldi	r24, 0x0A	; 10
     1de:	90 e0       	ldi	r25, 0x00	; 0
     1e0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <putchar>

	printf("Sector size %d\n",(FAT16_boot->sector_size));
     1e4:	c6 eb       	ldi	r28, 0xB6	; 182
     1e6:	d2 e0       	ldi	r29, 0x02	; 2
     1e8:	89 81       	ldd	r24, Y+1	; 0x01
     1ea:	8f 93       	push	r24
     1ec:	88 81       	ld	r24, Y
     1ee:	8f 93       	push	r24
     1f0:	88 e4       	ldi	r24, 0x48	; 72
     1f2:	91 e0       	ldi	r25, 0x01	; 1
     1f4:	9f 93       	push	r25
     1f6:	8f 93       	push	r24
     1f8:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>

	printf("Sectors_per_cluster %d\n",(FAT16_boot->sectors_per_cluster));
     1fc:	8a 81       	ldd	r24, Y+2	; 0x02
     1fe:	1f 92       	push	r1
     200:	8f 93       	push	r24
     202:	88 e5       	ldi	r24, 0x58	; 88
     204:	91 e0       	ldi	r25, 0x01	; 1
     206:	9f 93       	push	r25
     208:	8f 93       	push	r24
     20a:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>

	printf("reserved_sectors %d\n",(FAT16_boot->reserved_sectors));
     20e:	8c 81       	ldd	r24, Y+4	; 0x04
     210:	8f 93       	push	r24
     212:	8b 81       	ldd	r24, Y+3	; 0x03
     214:	8f 93       	push	r24
     216:	80 e7       	ldi	r24, 0x70	; 112
     218:	91 e0       	ldi	r25, 0x01	; 1
     21a:	9f 93       	push	r25
     21c:	8f 93       	push	r24
     21e:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>

	printf("nnumber_of_fats %d\n",(FAT16_boot->number_of_fats));
     222:	8d 81       	ldd	r24, Y+5	; 0x05
     224:	1f 92       	push	r1
     226:	8f 93       	push	r24
     228:	85 e8       	ldi	r24, 0x85	; 133
     22a:	91 e0       	ldi	r25, 0x01	; 1
     22c:	9f 93       	push	r25
     22e:	8f 93       	push	r24
     230:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>

	printf("nroot_dir_entries %d\n",(FAT16_boot->root_dir_entries));
     234:	8f 81       	ldd	r24, Y+7	; 0x07
     236:	8f 93       	push	r24
     238:	8e 81       	ldd	r24, Y+6	; 0x06
     23a:	8f 93       	push	r24
     23c:	89 e9       	ldi	r24, 0x99	; 153
     23e:	91 e0       	ldi	r25, 0x01	; 1
     240:	9f 93       	push	r25
     242:	8f 93       	push	r24
     244:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>

    printf("fat_size_sectors %d\n",(FAT16_boot->fat_size_sectors));
     248:	8c 85       	ldd	r24, Y+12	; 0x0c
     24a:	8f 93       	push	r24
     24c:	8b 85       	ldd	r24, Y+11	; 0x0b
     24e:	8f 93       	push	r24
     250:	8f ea       	ldi	r24, 0xAF	; 175
     252:	91 e0       	ldi	r25, 0x01	; 1
     254:	9f 93       	push	r25
     256:	8f 93       	push	r24
     258:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
	
    if(FAT16_boot->sector_size != 512)
     25c:	8d b7       	in	r24, 0x3d	; 61
     25e:	9e b7       	in	r25, 0x3e	; 62
     260:	48 96       	adiw	r24, 0x18	; 24
     262:	0f b6       	in	r0, 0x3f	; 63
     264:	f8 94       	cli
     266:	9e bf       	out	0x3e, r25	; 62
     268:	0f be       	out	0x3f, r0	; 63
     26a:	8d bf       	out	0x3d, r24	; 61
     26c:	88 81       	ld	r24, Y
     26e:	99 81       	ldd	r25, Y+1	; 0x01
     270:	81 15       	cp	r24, r1
     272:	92 40       	sbci	r25, 0x02	; 2
     274:	09 f0       	breq	.+2      	; 0x278 <fat16_init+0x1d2>
     276:	8f c0       	rjmp	.+286    	; 0x396 <fat16_init+0x2f0>
        return FAT16_ERR_INVALID_SECTOR_SIZE;
    
    fat16_state.fat_start += (FAT16_boot->reserved_sectors * 512);
     278:	8e 01       	movw	r16, r28
     27a:	fe 01       	movw	r30, r28
     27c:	2b 81       	ldd	r18, Y+3	; 0x03
     27e:	80 e0       	ldi	r24, 0x00	; 0
     280:	90 e0       	ldi	r25, 0x00	; 0
     282:	92 2f       	mov	r25, r18
     284:	99 0f       	add	r25, r25
     286:	c6 ed       	ldi	r28, 0xD6	; 214
     288:	d2 e0       	ldi	r29, 0x02	; 2
     28a:	c8 80       	ld	r12, Y
     28c:	d9 80       	ldd	r13, Y+1	; 0x01
     28e:	ea 80       	ldd	r14, Y+2	; 0x02
     290:	fb 80       	ldd	r15, Y+3	; 0x03
     292:	46 01       	movw	r8, r12
     294:	57 01       	movw	r10, r14
     296:	88 0e       	add	r8, r24
     298:	99 1e       	adc	r9, r25
     29a:	a1 1c       	adc	r10, r1
     29c:	b1 1c       	adc	r11, r1
     29e:	88 82       	st	Y, r8
     2a0:	99 82       	std	Y+1, r9	; 0x01
     2a2:	aa 82       	std	Y+2, r10	; 0x02
     2a4:	bb 82       	std	Y+3, r11	; 0x03
	
	
    
	// typecasting: (type)data    data will act like type declared in parentheses
    root_start = fat16_state.fat_start + (unsigned long)FAT16_boot->fat_size_sectors * 
        (unsigned long)FAT16_boot->number_of_fats * 512;
     2a6:	45 81       	ldd	r20, Z+5	; 0x05
    fat16_state.fat_start += (FAT16_boot->reserved_sectors * 512);
	
	
    
	// typecasting: (type)data    data will act like type declared in parentheses
    root_start = fat16_state.fat_start + (unsigned long)FAT16_boot->fat_size_sectors * 
     2a8:	23 85       	ldd	r18, Z+11	; 0x0b
     2aa:	34 85       	ldd	r19, Z+12	; 0x0c
     2ac:	a4 2f       	mov	r26, r20
     2ae:	b0 e0       	ldi	r27, 0x00	; 0
     2b0:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__umulhisi3>
        (unsigned long)FAT16_boot->number_of_fats * 512;
     2b4:	6b 01       	movw	r12, r22
     2b6:	7c 01       	movw	r14, r24
     2b8:	0b 2e       	mov	r0, r27
     2ba:	b9 e0       	ldi	r27, 0x09	; 9
     2bc:	cc 0c       	add	r12, r12
     2be:	dd 1c       	adc	r13, r13
     2c0:	ee 1c       	adc	r14, r14
     2c2:	ff 1c       	adc	r15, r15
     2c4:	ba 95       	dec	r27
     2c6:	d1 f7       	brne	.-12     	; 0x2bc <fat16_init+0x216>
     2c8:	b0 2d       	mov	r27, r0
    fat16_state.fat_start += (FAT16_boot->reserved_sectors * 512);
	
	
    
	// typecasting: (type)data    data will act like type declared in parentheses
    root_start = fat16_state.fat_start + (unsigned long)FAT16_boot->fat_size_sectors * 
     2ca:	c8 0c       	add	r12, r8
     2cc:	d9 1c       	adc	r13, r9
     2ce:	ea 1c       	adc	r14, r10
     2d0:	fb 1c       	adc	r15, r11
        (unsigned long)FAT16_boot->number_of_fats * 512;
	
	printf("number_of_fats %d\n",((unsigned int)FAT16_boot->number_of_fats));
     2d2:	1f 92       	push	r1
     2d4:	4f 93       	push	r20
     2d6:	86 e8       	ldi	r24, 0x86	; 134
     2d8:	91 e0       	ldi	r25, 0x01	; 1
     2da:	9f 93       	push	r25
     2dc:	8f 93       	push	r24
     2de:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
	
	
    fat16_state.data_start = root_start + sizeof(Fat16Entry) * 
        (unsigned long)FAT16_boot->root_dir_entries;
     2e2:	f8 01       	movw	r30, r16
     2e4:	26 81       	ldd	r18, Z+6	; 0x06
     2e6:	37 81       	ldd	r19, Z+7	; 0x07
     2e8:	c9 01       	movw	r24, r18
     2ea:	a0 e0       	ldi	r26, 0x00	; 0
     2ec:	b0 e0       	ldi	r27, 0x00	; 0
        (unsigned long)FAT16_boot->number_of_fats * 512;
	
	printf("number_of_fats %d\n",((unsigned int)FAT16_boot->number_of_fats));
	
	
    fat16_state.data_start = root_start + sizeof(Fat16Entry) * 
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	aa 1f       	adc	r26, r26
     2f4:	bb 1f       	adc	r27, r27
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	aa 1f       	adc	r26, r26
     2fc:	bb 1f       	adc	r27, r27
     2fe:	88 0f       	add	r24, r24
     300:	99 1f       	adc	r25, r25
     302:	aa 1f       	adc	r26, r26
     304:	bb 1f       	adc	r27, r27
     306:	88 0f       	add	r24, r24
     308:	99 1f       	adc	r25, r25
     30a:	aa 1f       	adc	r26, r26
     30c:	bb 1f       	adc	r27, r27
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	aa 1f       	adc	r26, r26
     314:	bb 1f       	adc	r27, r27
     316:	8c 0d       	add	r24, r12
     318:	9d 1d       	adc	r25, r13
     31a:	ae 1d       	adc	r26, r14
     31c:	bf 1d       	adc	r27, r15
     31e:	8c 83       	std	Y+4, r24	; 0x04
     320:	9d 83       	std	Y+5, r25	; 0x05
     322:	ae 83       	std	Y+6, r26	; 0x06
     324:	bf 83       	std	Y+7, r27	; 0x07
        (unsigned long)FAT16_boot->root_dir_entries;
        	
    fat16_state.sectors_per_cluster = FAT16_boot->sectors_per_cluster;
     326:	42 81       	ldd	r20, Z+2	; 0x02
     328:	48 87       	std	Y+8, r20	; 0x08
    
    // Prepare for fat16_open_file(), cluster is not needed
    fat16_state.file_left = FAT16_boot->root_dir_entries * sizeof(Fat16Entry);
     32a:	a9 01       	movw	r20, r18
     32c:	44 0f       	add	r20, r20
     32e:	55 1f       	adc	r21, r21
     330:	42 95       	swap	r20
     332:	52 95       	swap	r21
     334:	50 7f       	andi	r21, 0xF0	; 240
     336:	54 27       	eor	r21, r20
     338:	40 7f       	andi	r20, 0xF0	; 240
     33a:	54 27       	eor	r21, r20
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	70 e0       	ldi	r23, 0x00	; 0
     340:	4f 87       	std	Y+15, r20	; 0x0f
     342:	58 8b       	std	Y+16, r21	; 0x10
     344:	69 8b       	std	Y+17, r22	; 0x11
     346:	7a 8b       	std	Y+18, r23	; 0x12
    fat16_state.cluster_left = 0xFFFFFFFF; // avoid FAT lookup with root dir
     348:	4f ef       	ldi	r20, 0xFF	; 255
     34a:	5f ef       	ldi	r21, 0xFF	; 255
     34c:	ba 01       	movw	r22, r20
     34e:	4b 87       	std	Y+11, r20	; 0x0b
     350:	5c 87       	std	Y+12, r21	; 0x0c
     352:	6d 87       	std	Y+13, r22	; 0x0d
     354:	7e 87       	std	Y+14, r23	; 0x0e

#ifdef DEBUG   
 
    printf("FAT start at %#08X, root dir at %#08lX, data at %#08X\n", 
     356:	9f 93       	push	r25
     358:	8f 93       	push	r24
     35a:	ff 92       	push	r15
     35c:	ef 92       	push	r14
     35e:	df 92       	push	r13
     360:	cf 92       	push	r12
     362:	89 81       	ldd	r24, Y+1	; 0x01
     364:	8f 93       	push	r24
     366:	88 81       	ld	r24, Y
     368:	8f 93       	push	r24
     36a:	84 ec       	ldi	r24, 0xC4	; 196
     36c:	91 e0       	ldi	r25, 0x01	; 1
     36e:	9f 93       	push	r25
     370:	8f 93       	push	r24
     372:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
           (unsigned int)fat16_state.fat_start, root_start, (unsigned int)fat16_state.data_start);
#endif
           
    fat16_seek(root_start);
     376:	c7 01       	movw	r24, r14
     378:	b6 01       	movw	r22, r12
     37a:	0e 94 63 06 	call	0xcc6	; 0xcc6 <fat16_seek>

    return 0;
     37e:	8d b7       	in	r24, 0x3d	; 61
     380:	9e b7       	in	r25, 0x3e	; 62
     382:	0e 96       	adiw	r24, 0x0e	; 14
     384:	0f b6       	in	r0, 0x3f	; 63
     386:	f8 94       	cli
     388:	9e bf       	out	0x3e, r25	; 62
     38a:	0f be       	out	0x3f, r0	; 63
     38c:	8d bf       	out	0x3d, r24	; 61
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	03 c0       	rjmp	.+6      	; 0x398 <fat16_init+0x2f2>
           FAT16_part->partition_type == 14)
            break;
    }
    
    if(i == 4) // none of the partitions were FAT16
        return FAT16_ERR_NO_PARTITION_FOUND;
     392:	8f ef       	ldi	r24, 0xFF	; 255
     394:	01 c0       	rjmp	.+2      	; 0x398 <fat16_init+0x2f2>
	printf("nroot_dir_entries %d\n",(FAT16_boot->root_dir_entries));

    printf("fat_size_sectors %d\n",(FAT16_boot->fat_size_sectors));
	
    if(FAT16_boot->sector_size != 512)
        return FAT16_ERR_INVALID_SECTOR_SIZE;
     396:	8e ef       	ldi	r24, 0xFE	; 254
#endif
           
    fat16_seek(root_start);

    return 0;
}
     398:	df 91       	pop	r29
     39a:	cf 91       	pop	r28
     39c:	1f 91       	pop	r17
     39e:	0f 91       	pop	r16
     3a0:	ff 90       	pop	r15
     3a2:	ef 90       	pop	r14
     3a4:	df 90       	pop	r13
     3a6:	cf 90       	pop	r12
     3a8:	bf 90       	pop	r11
     3aa:	af 90       	pop	r10
     3ac:	9f 90       	pop	r9
     3ae:	8f 90       	pop	r8
     3b0:	08 95       	ret

000003b2 <fat16_read_file>:
#endif
    
    return FAT16_ERR_FILE_NOT_FOUND;
}

char fat16_read_file(char bytes) { // returns the bytes read
     3b2:	cf 92       	push	r12
     3b4:	df 92       	push	r13
     3b6:	ef 92       	push	r14
     3b8:	ff 92       	push	r15
     3ba:	0f 93       	push	r16
     3bc:	1f 93       	push	r17
     3be:	cf 93       	push	r28
     3c0:	c8 2f       	mov	r28, r24
#ifdef DEBUG   
    //printf("fat16_read_file: Cluster %d, bytes left %d/%d\n", fat16_state.cluster, fat16_state.file_left, fat16_state.cluster_left);
#endif
 
    if(fat16_state.file_left == 0)
     3c2:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <fat16_state+0xf>
     3c6:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <fat16_state+0x10>
     3ca:	a0 91 e7 02 	lds	r26, 0x02E7	; 0x8002e7 <fat16_state+0x11>
     3ce:	b0 91 e8 02 	lds	r27, 0x02E8	; 0x8002e8 <fat16_state+0x12>
     3d2:	89 2b       	or	r24, r25
     3d4:	8a 2b       	or	r24, r26
     3d6:	8b 2b       	or	r24, r27
     3d8:	09 f4       	brne	.+2      	; 0x3dc <fat16_read_file+0x2a>
     3da:	b7 c0       	rjmp	.+366    	; 0x54a <__FUSE_REGION_LENGTH__+0x14a>
        return 0;
    
    if(fat16_state.cluster_left == 0) {
     3dc:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <fat16_state+0xb>
     3e0:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <fat16_state+0xc>
     3e4:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <fat16_state+0xd>
     3e8:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <fat16_state+0xe>
     3ec:	89 2b       	or	r24, r25
     3ee:	8a 2b       	or	r24, r26
     3f0:	8b 2b       	or	r24, r27
     3f2:	09 f0       	breq	.+2      	; 0x3f6 <fat16_read_file+0x44>
     3f4:	64 c0       	rjmp	.+200    	; 0x4be <__FUSE_REGION_LENGTH__+0xbe>
        fat16_seek(fat16_state.fat_start + (unsigned long)fat16_state.cluster*2);
     3f6:	06 ed       	ldi	r16, 0xD6	; 214
     3f8:	12 e0       	ldi	r17, 0x02	; 2
     3fa:	f8 01       	movw	r30, r16
     3fc:	81 85       	ldd	r24, Z+9	; 0x09
     3fe:	92 85       	ldd	r25, Z+10	; 0x0a
     400:	a0 e0       	ldi	r26, 0x00	; 0
     402:	b0 e0       	ldi	r27, 0x00	; 0
     404:	88 0f       	add	r24, r24
     406:	99 1f       	adc	r25, r25
     408:	aa 1f       	adc	r26, r26
     40a:	bb 1f       	adc	r27, r27
     40c:	40 81       	ld	r20, Z
     40e:	51 81       	ldd	r21, Z+1	; 0x01
     410:	62 81       	ldd	r22, Z+2	; 0x02
     412:	73 81       	ldd	r23, Z+3	; 0x03
     414:	6c 01       	movw	r12, r24
     416:	7d 01       	movw	r14, r26
     418:	c4 0e       	add	r12, r20
     41a:	d5 1e       	adc	r13, r21
     41c:	e6 1e       	adc	r14, r22
     41e:	f7 1e       	adc	r15, r23
     420:	c7 01       	movw	r24, r14
     422:	b6 01       	movw	r22, r12
     424:	0e 94 63 06 	call	0xcc6	; 0xcc6 <fat16_seek>
        fat16_read(2);
     428:	82 e0       	ldi	r24, 0x02	; 2
     42a:	0e 94 80 06 	call	0xd00	; 0xd00 <fat16_read>
        
        fat16_state.cluster = FAT16_ushort[0];
     42e:	a0 91 b6 02 	lds	r26, 0x02B6	; 0x8002b6 <__data_end>
     432:	b0 91 b7 02 	lds	r27, 0x02B7	; 0x8002b7 <__data_end+0x1>
     436:	f8 01       	movw	r30, r16
     438:	b2 87       	std	Z+10, r27	; 0x0a
     43a:	a1 87       	std	Z+9, r26	; 0x09
        fat16_state.cluster_left = (unsigned long)fat16_state.sectors_per_cluster * 512;
     43c:	20 85       	ldd	r18, Z+8	; 0x08
     43e:	42 2f       	mov	r20, r18
     440:	50 e0       	ldi	r21, 0x00	; 0
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	9a 01       	movw	r18, r20
     448:	ab 01       	movw	r20, r22
     44a:	01 2e       	mov	r0, r17
     44c:	19 e0       	ldi	r17, 0x09	; 9
     44e:	22 0f       	add	r18, r18
     450:	33 1f       	adc	r19, r19
     452:	44 1f       	adc	r20, r20
     454:	55 1f       	adc	r21, r21
     456:	1a 95       	dec	r17
     458:	d1 f7       	brne	.-12     	; 0x44e <__FUSE_REGION_LENGTH__+0x4e>
     45a:	10 2d       	mov	r17, r0
     45c:	23 87       	std	Z+11, r18	; 0x0b
     45e:	34 87       	std	Z+12, r19	; 0x0c
     460:	45 87       	std	Z+13, r20	; 0x0d
     462:	56 87       	std	Z+14, r21	; 0x0e
        
        if(fat16_state.cluster == 0xFFFF) { // end of cluster chain
     464:	af 3f       	cpi	r26, 0xFF	; 255
     466:	ff ef       	ldi	r31, 0xFF	; 255
     468:	bf 07       	cpc	r27, r31
     46a:	51 f4       	brne	.+20     	; 0x480 <__FUSE_REGION_LENGTH__+0x80>
            fat16_state.file_left = 0;
     46c:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <fat16_state+0xf>
     470:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <fat16_state+0x10>
     474:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <fat16_state+0x11>
     478:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <fat16_state+0x12>
            return 0;
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	66 c0       	rjmp	.+204    	; 0x54c <__FUSE_REGION_LENGTH__+0x14c>
        }
            
        // Go to first cluster
        fat16_seek(fat16_state.data_start + (unsigned long)(fat16_state.cluster-2) * 
     480:	12 97       	sbiw	r26, 0x02	; 2
            (unsigned long)fat16_state.sectors_per_cluster * 512);
     482:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__muluhisi3>
            fat16_state.file_left = 0;
            return 0;
        }
            
        // Go to first cluster
        fat16_seek(fat16_state.data_start + (unsigned long)(fat16_state.cluster-2) * 
     486:	06 ed       	ldi	r16, 0xD6	; 214
     488:	12 e0       	ldi	r17, 0x02	; 2
     48a:	f8 01       	movw	r30, r16
     48c:	c4 80       	ldd	r12, Z+4	; 0x04
     48e:	d5 80       	ldd	r13, Z+5	; 0x05
     490:	e6 80       	ldd	r14, Z+6	; 0x06
     492:	f7 80       	ldd	r15, Z+7	; 0x07
     494:	6c 0d       	add	r22, r12
     496:	7d 1d       	adc	r23, r13
     498:	8e 1d       	adc	r24, r14
     49a:	9f 1d       	adc	r25, r15
     49c:	0e 94 63 06 	call	0xcc6	; 0xcc6 <fat16_seek>
            (unsigned long)fat16_state.sectors_per_cluster * 512);
        
#ifdef DEBUG    
        printf("Next cluster %d\n", fat16_state.cluster);
     4a0:	f8 01       	movw	r30, r16
     4a2:	82 85       	ldd	r24, Z+10	; 0x0a
     4a4:	8f 93       	push	r24
     4a6:	81 85       	ldd	r24, Z+9	; 0x09
     4a8:	8f 93       	push	r24
     4aa:	8b ef       	ldi	r24, 0xFB	; 251
     4ac:	91 e0       	ldi	r25, 0x01	; 1
     4ae:	9f 93       	push	r25
     4b0:	8f 93       	push	r24
     4b2:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
     4b6:	0f 90       	pop	r0
     4b8:	0f 90       	pop	r0
     4ba:	0f 90       	pop	r0
     4bc:	0f 90       	pop	r0
#endif
    }
    
    if(bytes > fat16_state.file_left)
     4be:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <fat16_state+0xf>
     4c2:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <fat16_state+0x10>
     4c6:	a0 91 e7 02 	lds	r26, 0x02E7	; 0x8002e7 <fat16_state+0x11>
     4ca:	b0 91 e8 02 	lds	r27, 0x02E8	; 0x8002e8 <fat16_state+0x12>
     4ce:	4c 2f       	mov	r20, r28
     4d0:	50 e0       	ldi	r21, 0x00	; 0
     4d2:	60 e0       	ldi	r22, 0x00	; 0
     4d4:	70 e0       	ldi	r23, 0x00	; 0
     4d6:	84 17       	cp	r24, r20
     4d8:	95 07       	cpc	r25, r21
     4da:	a6 07       	cpc	r26, r22
     4dc:	b7 07       	cpc	r27, r23
     4de:	08 f4       	brcc	.+2      	; 0x4e2 <__FUSE_REGION_LENGTH__+0xe2>
        bytes = fat16_state.file_left;
     4e0:	c8 2f       	mov	r28, r24
    if(bytes > fat16_state.cluster_left)
     4e2:	80 91 e1 02 	lds	r24, 0x02E1	; 0x8002e1 <fat16_state+0xb>
     4e6:	90 91 e2 02 	lds	r25, 0x02E2	; 0x8002e2 <fat16_state+0xc>
     4ea:	a0 91 e3 02 	lds	r26, 0x02E3	; 0x8002e3 <fat16_state+0xd>
     4ee:	b0 91 e4 02 	lds	r27, 0x02E4	; 0x8002e4 <fat16_state+0xe>
     4f2:	4c 2f       	mov	r20, r28
     4f4:	50 e0       	ldi	r21, 0x00	; 0
     4f6:	60 e0       	ldi	r22, 0x00	; 0
     4f8:	70 e0       	ldi	r23, 0x00	; 0
     4fa:	84 17       	cp	r24, r20
     4fc:	95 07       	cpc	r25, r21
     4fe:	a6 07       	cpc	r26, r22
     500:	b7 07       	cpc	r27, r23
     502:	08 f4       	brcc	.+2      	; 0x506 <__FUSE_REGION_LENGTH__+0x106>
        bytes = fat16_state.cluster_left;
     504:	c8 2f       	mov	r28, r24
        
    bytes = fat16_read(bytes);
     506:	8c 2f       	mov	r24, r28
     508:	0e 94 80 06 	call	0xd00	; 0xd00 <fat16_read>
    
    fat16_state.file_left -= bytes;
     50c:	08 2f       	mov	r16, r24
     50e:	10 e0       	ldi	r17, 0x00	; 0
     510:	20 e0       	ldi	r18, 0x00	; 0
     512:	30 e0       	ldi	r19, 0x00	; 0
     514:	e6 ed       	ldi	r30, 0xD6	; 214
     516:	f2 e0       	ldi	r31, 0x02	; 2
     518:	47 85       	ldd	r20, Z+15	; 0x0f
     51a:	50 89       	ldd	r21, Z+16	; 0x10
     51c:	61 89       	ldd	r22, Z+17	; 0x11
     51e:	72 89       	ldd	r23, Z+18	; 0x12
     520:	40 1b       	sub	r20, r16
     522:	51 0b       	sbc	r21, r17
     524:	62 0b       	sbc	r22, r18
     526:	73 0b       	sbc	r23, r19
     528:	47 87       	std	Z+15, r20	; 0x0f
     52a:	50 8b       	std	Z+16, r21	; 0x10
     52c:	61 8b       	std	Z+17, r22	; 0x11
     52e:	72 8b       	std	Z+18, r23	; 0x12
    fat16_state.cluster_left -= bytes;
     530:	43 85       	ldd	r20, Z+11	; 0x0b
     532:	54 85       	ldd	r21, Z+12	; 0x0c
     534:	65 85       	ldd	r22, Z+13	; 0x0d
     536:	76 85       	ldd	r23, Z+14	; 0x0e
     538:	40 1b       	sub	r20, r16
     53a:	51 0b       	sbc	r21, r17
     53c:	62 0b       	sbc	r22, r18
     53e:	73 0b       	sbc	r23, r19
     540:	43 87       	std	Z+11, r20	; 0x0b
     542:	54 87       	std	Z+12, r21	; 0x0c
     544:	65 87       	std	Z+13, r22	; 0x0d
     546:	76 87       	std	Z+14, r23	; 0x0e

#ifdef DEBUG   
    //printf("%d bytes read: Cluster %d, bytes left %d/%d\n", bytes, fat16_state.cluster, fat16_state.file_left, fat16_state.cluster_left);
#endif
    
    return bytes;
     548:	01 c0       	rjmp	.+2      	; 0x54c <__FUSE_REGION_LENGTH__+0x14c>
#ifdef DEBUG   
    //printf("fat16_read_file: Cluster %d, bytes left %d/%d\n", fat16_state.cluster, fat16_state.file_left, fat16_state.cluster_left);
#endif
 
    if(fat16_state.file_left == 0)
        return 0;
     54a:	80 e0       	ldi	r24, 0x00	; 0
#ifdef DEBUG   
    //printf("%d bytes read: Cluster %d, bytes left %d/%d\n", bytes, fat16_state.cluster, fat16_state.file_left, fat16_state.cluster_left);
#endif
    
    return bytes;
}
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	08 95       	ret

0000055c <fat16_open_file>:
}

// Assumes we are at the beginning of a directory and fat16_state.file_left
// is set to amount of file entries. Reads on until a given file is found,
// or no more file entries are available.
char fat16_open_file(char *filename, char *ext) {  
     55c:	4f 92       	push	r4
     55e:	5f 92       	push	r5
     560:	6f 92       	push	r6
     562:	7f 92       	push	r7
     564:	8f 92       	push	r8
     566:	9f 92       	push	r9
     568:	af 92       	push	r10
     56a:	bf 92       	push	r11
     56c:	cf 92       	push	r12
     56e:	df 92       	push	r13
     570:	ef 92       	push	r14
     572:	ff 92       	push	r15
     574:	0f 93       	push	r16
     576:	1f 93       	push	r17
     578:	cf 93       	push	r28
     57a:	df 93       	push	r29
     57c:	7c 01       	movw	r14, r24
     57e:	8b 01       	movw	r16, r22
    unsigned int i, bytes;
    
#ifdef DEBUG
    printf("Trying to open file [%s.%s]\n", filename, ext);
     580:	1f 93       	push	r17
     582:	6f 93       	push	r22
     584:	ff 92       	push	r15
     586:	8f 93       	push	r24
     588:	8c e0       	ldi	r24, 0x0C	; 12
     58a:	92 e0       	ldi	r25, 0x02	; 2
     58c:	9f 93       	push	r25
     58e:	8f 93       	push	r24
     590:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	0f 90       	pop	r0
     59e:	0f 90       	pop	r0
        
        if(bytes < sizeof(Fat16Entry))
            return FAT16_ERR_FILE_READ;
		
#ifdef DEBUG
        if(FAT16_entry->filename[0])
     5a0:	0f 2e       	mov	r0, r31
     5a2:	f6 eb       	ldi	r31, 0xB6	; 182
     5a4:	8f 2e       	mov	r8, r31
     5a6:	f2 e0       	ldi	r31, 0x02	; 2
     5a8:	9f 2e       	mov	r9, r31
     5aa:	f0 2d       	mov	r31, r0
            printf("Found file [%.8s.%.3s]\n", FAT16_entry->filename, FAT16_entry->ext);
     5ac:	ce eb       	ldi	r28, 0xBE	; 190
     5ae:	d2 e0       	ldi	r29, 0x02	; 2
     5b0:	0f 2e       	mov	r0, r31
     5b2:	f9 e2       	ldi	r31, 0x29	; 41
     5b4:	af 2e       	mov	r10, r31
     5b6:	f2 e0       	ldi	r31, 0x02	; 2
     5b8:	bf 2e       	mov	r11, r31
     5ba:	f0 2d       	mov	r31, r0
     5bc:	0f 2e       	mov	r0, r31
     5be:	f7 eb       	ldi	r31, 0xB7	; 183
     5c0:	6f 2e       	mov	r6, r31
     5c2:	f2 e0       	ldi	r31, 0x02	; 2
     5c4:	7f 2e       	mov	r7, r31
     5c6:	f0 2d       	mov	r31, r0
     5c8:	27 01       	movw	r4, r14
     5ca:	8f ef       	ldi	r24, 0xFF	; 255
     5cc:	48 1a       	sub	r4, r24
     5ce:	58 0a       	sbc	r5, r24
        
        // Go to first cluster
        fat16_seek(fat16_state.data_start + (unsigned long)(fat16_state.cluster-2) * 
            (unsigned long)fat16_state.sectors_per_cluster * 512);
        return 0;
    } while(fat16_state.file_left > 0);
     5d0:	0f 2e       	mov	r0, r31
     5d2:	f6 ed       	ldi	r31, 0xD6	; 214
     5d4:	cf 2e       	mov	r12, r31
     5d6:	f2 e0       	ldi	r31, 0x02	; 2
     5d8:	df 2e       	mov	r13, r31
     5da:	f0 2d       	mov	r31, r0
#ifdef DEBUG
    printf("Trying to open file [%s.%s]\n", filename, ext);
#endif

    do {
        bytes = fat16_read_file(sizeof(Fat16Entry));
     5dc:	80 e2       	ldi	r24, 0x20	; 32
     5de:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <fat16_read_file>
        
        if(bytes < sizeof(Fat16Entry))
     5e2:	80 32       	cpi	r24, 0x20	; 32
     5e4:	08 f4       	brcc	.+2      	; 0x5e8 <fat16_open_file+0x8c>
     5e6:	a5 c0       	rjmp	.+330    	; 0x732 <fat16_open_file+0x1d6>
            return FAT16_ERR_FILE_READ;
		
#ifdef DEBUG
        if(FAT16_entry->filename[0])
     5e8:	f4 01       	movw	r30, r8
     5ea:	80 81       	ld	r24, Z
     5ec:	88 23       	and	r24, r24
     5ee:	71 f0       	breq	.+28     	; 0x60c <fat16_open_file+0xb0>
            printf("Found file [%.8s.%.3s]\n", FAT16_entry->filename, FAT16_entry->ext);
     5f0:	df 93       	push	r29
     5f2:	cf 93       	push	r28
     5f4:	9f 92       	push	r9
     5f6:	8f 92       	push	r8
     5f8:	bf 92       	push	r11
     5fa:	af 92       	push	r10
     5fc:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
     600:	0f 90       	pop	r0
     602:	0f 90       	pop	r0
     604:	0f 90       	pop	r0
     606:	0f 90       	pop	r0
     608:	0f 90       	pop	r0
     60a:	0f 90       	pop	r0
#endif

        for(i=0; i<8; i++) // we don't have memcmp on a MCU...
            if(FAT16_entry->filename[i] != filename[i])
     60c:	f4 01       	movw	r30, r8
     60e:	90 81       	ld	r25, Z
     610:	f7 01       	movw	r30, r14
     612:	80 81       	ld	r24, Z
     614:	98 13       	cpse	r25, r24
     616:	71 c0       	rjmp	.+226    	; 0x6fa <fat16_open_file+0x19e>
     618:	f3 01       	movw	r30, r6
     61a:	d2 01       	movw	r26, r4
     61c:	91 91       	ld	r25, Z+
     61e:	8d 91       	ld	r24, X+
     620:	98 13       	cpse	r25, r24
     622:	6b c0       	rjmp	.+214    	; 0x6fa <fat16_open_file+0x19e>
#ifdef DEBUG
        if(FAT16_entry->filename[0])
            printf("Found file [%.8s.%.3s]\n", FAT16_entry->filename, FAT16_entry->ext);
#endif

        for(i=0; i<8; i++) // we don't have memcmp on a MCU...
     624:	ec 17       	cp	r30, r28
     626:	fd 07       	cpc	r31, r29
     628:	c9 f7       	brne	.-14     	; 0x61c <fat16_open_file+0xc0>
     62a:	85 c0       	rjmp	.+266    	; 0x736 <fat16_open_file+0x1da>
                break;        
        if(i < 8) // not the filename we are looking for
            continue;
		
        for(i=0; i<3; i++) // we don't have memcmp on a MCU...
            if(FAT16_entry->ext[i] != ext[i])
     62c:	f4 01       	movw	r30, r8
     62e:	92 85       	ldd	r25, Z+10	; 0x0a
     630:	f8 01       	movw	r30, r16
     632:	82 81       	ldd	r24, Z+2	; 0x02
     634:	98 13       	cpse	r25, r24
     636:	61 c0       	rjmp	.+194    	; 0x6fa <fat16_open_file+0x19e>
                break;
        if(i < 3) // not the extension we are looking for
            continue;
            
#ifdef DEBUG
        printf("File found at cluster %d!\n", FAT16_entry->starting_cluster);
     638:	c6 eb       	ldi	r28, 0xB6	; 182
     63a:	d2 e0       	ldi	r29, 0x02	; 2
     63c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     63e:	8f 93       	push	r24
     640:	8a 8d       	ldd	r24, Y+26	; 0x1a
     642:	8f 93       	push	r24
     644:	81 e4       	ldi	r24, 0x41	; 65
     646:	92 e0       	ldi	r25, 0x02	; 2
     648:	9f 93       	push	r25
     64a:	8f 93       	push	r24
     64c:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
#endif

        // Initialize reading variables
        fat16_state.cluster = FAT16_entry->starting_cluster;
     650:	aa 8d       	ldd	r26, Y+26	; 0x1a
     652:	bb 8d       	ldd	r27, Y+27	; 0x1b
     654:	e6 ed       	ldi	r30, 0xD6	; 214
     656:	f2 e0       	ldi	r31, 0x02	; 2
     658:	b2 87       	std	Z+10, r27	; 0x0a
     65a:	a1 87       	std	Z+9, r26	; 0x09
        fat16_state.cluster_left = (unsigned long)fat16_state.sectors_per_cluster * 512;
     65c:	20 85       	ldd	r18, Z+8	; 0x08
     65e:	42 2f       	mov	r20, r18
     660:	50 e0       	ldi	r21, 0x00	; 0
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	70 e0       	ldi	r23, 0x00	; 0
     666:	9a 01       	movw	r18, r20
     668:	ab 01       	movw	r20, r22
     66a:	01 2e       	mov	r0, r17
     66c:	19 e0       	ldi	r17, 0x09	; 9
     66e:	22 0f       	add	r18, r18
     670:	33 1f       	adc	r19, r19
     672:	44 1f       	adc	r20, r20
     674:	55 1f       	adc	r21, r21
     676:	1a 95       	dec	r17
     678:	d1 f7       	brne	.-12     	; 0x66e <fat16_open_file+0x112>
     67a:	10 2d       	mov	r17, r0
     67c:	23 87       	std	Z+11, r18	; 0x0b
     67e:	34 87       	std	Z+12, r19	; 0x0c
     680:	45 87       	std	Z+13, r20	; 0x0d
     682:	56 87       	std	Z+14, r21	; 0x0e
        
        if(FAT16_entry->filename[0] == 0x2E || 
     684:	0f 90       	pop	r0
     686:	0f 90       	pop	r0
     688:	0f 90       	pop	r0
     68a:	0f 90       	pop	r0
     68c:	88 81       	ld	r24, Y
     68e:	8e 32       	cpi	r24, 0x2E	; 46
     690:	21 f0       	breq	.+8      	; 0x69a <fat16_open_file+0x13e>
           FAT16_entry->attributes & 0x10) { // directory
     692:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <__data_end+0xb>

        // Initialize reading variables
        fat16_state.cluster = FAT16_entry->starting_cluster;
        fat16_state.cluster_left = (unsigned long)fat16_state.sectors_per_cluster * 512;
        
        if(FAT16_entry->filename[0] == 0x2E || 
     696:	84 ff       	sbrs	r24, 4
     698:	0d c0       	rjmp	.+26     	; 0x6b4 <fat16_open_file+0x158>
           FAT16_entry->attributes & 0x10) { // directory
            // set file size so large that the file entries
            // are not limited by it, but by the sectors used
            fat16_state.file_left = 0xFFFFFFFF;
     69a:	cc 24       	eor	r12, r12
     69c:	ca 94       	dec	r12
     69e:	dc 2c       	mov	r13, r12
     6a0:	76 01       	movw	r14, r12
     6a2:	c0 92 e5 02 	sts	0x02E5, r12	; 0x8002e5 <fat16_state+0xf>
     6a6:	d0 92 e6 02 	sts	0x02E6, r13	; 0x8002e6 <fat16_state+0x10>
     6aa:	e0 92 e7 02 	sts	0x02E7, r14	; 0x8002e7 <fat16_state+0x11>
     6ae:	f0 92 e8 02 	sts	0x02E8, r15	; 0x8002e8 <fat16_state+0x12>
     6b2:	10 c0       	rjmp	.+32     	; 0x6d4 <fat16_open_file+0x178>
        } else {
            fat16_state.file_left = FAT16_entry->file_size;
     6b4:	c0 90 d2 02 	lds	r12, 0x02D2	; 0x8002d2 <__data_end+0x1c>
     6b8:	d0 90 d3 02 	lds	r13, 0x02D3	; 0x8002d3 <__data_end+0x1d>
     6bc:	e0 90 d4 02 	lds	r14, 0x02D4	; 0x8002d4 <__data_end+0x1e>
     6c0:	f0 90 d5 02 	lds	r15, 0x02D5	; 0x8002d5 <__data_end+0x1f>
     6c4:	c0 92 e5 02 	sts	0x02E5, r12	; 0x8002e5 <fat16_state+0xf>
     6c8:	d0 92 e6 02 	sts	0x02E6, r13	; 0x8002e6 <fat16_state+0x10>
     6cc:	e0 92 e7 02 	sts	0x02E7, r14	; 0x8002e7 <fat16_state+0x11>
     6d0:	f0 92 e8 02 	sts	0x02E8, r15	; 0x8002e8 <fat16_state+0x12>
        }
        
        // Go to first cluster
        fat16_seek(fat16_state.data_start + (unsigned long)(fat16_state.cluster-2) * 
     6d4:	12 97       	sbiw	r26, 0x02	; 2
            (unsigned long)fat16_state.sectors_per_cluster * 512);
     6d6:	0e 94 d5 06 	call	0xdaa	; 0xdaa <__muluhisi3>
        } else {
            fat16_state.file_left = FAT16_entry->file_size;
        }
        
        // Go to first cluster
        fat16_seek(fat16_state.data_start + (unsigned long)(fat16_state.cluster-2) * 
     6da:	00 91 da 02 	lds	r16, 0x02DA	; 0x8002da <fat16_state+0x4>
     6de:	10 91 db 02 	lds	r17, 0x02DB	; 0x8002db <fat16_state+0x5>
     6e2:	20 91 dc 02 	lds	r18, 0x02DC	; 0x8002dc <fat16_state+0x6>
     6e6:	30 91 dd 02 	lds	r19, 0x02DD	; 0x8002dd <fat16_state+0x7>
     6ea:	60 0f       	add	r22, r16
     6ec:	71 1f       	adc	r23, r17
     6ee:	82 1f       	adc	r24, r18
     6f0:	93 1f       	adc	r25, r19
     6f2:	0e 94 63 06 	call	0xcc6	; 0xcc6 <fat16_seek>
            (unsigned long)fat16_state.sectors_per_cluster * 512);
        return 0;
     6f6:	80 e0       	ldi	r24, 0x00	; 0
     6f8:	2c c0       	rjmp	.+88     	; 0x752 <fat16_open_file+0x1f6>
    } while(fat16_state.file_left > 0);
     6fa:	f6 01       	movw	r30, r12
     6fc:	87 85       	ldd	r24, Z+15	; 0x0f
     6fe:	90 89       	ldd	r25, Z+16	; 0x10
     700:	a1 89       	ldd	r26, Z+17	; 0x11
     702:	b2 89       	ldd	r27, Z+18	; 0x12
     704:	89 2b       	or	r24, r25
     706:	8a 2b       	or	r24, r26
     708:	8b 2b       	or	r24, r27
     70a:	09 f0       	breq	.+2      	; 0x70e <fat16_open_file+0x1b2>
     70c:	67 cf       	rjmp	.-306    	; 0x5dc <fat16_open_file+0x80>
    
#ifdef DEBUG    
    printf("File not found: [%s.%s]!\n", filename, ext);
     70e:	1f 93       	push	r17
     710:	0f 93       	push	r16
     712:	ff 92       	push	r15
     714:	ef 92       	push	r14
     716:	8c e5       	ldi	r24, 0x5C	; 92
     718:	92 e0       	ldi	r25, 0x02	; 2
     71a:	9f 93       	push	r25
     71c:	8f 93       	push	r24
     71e:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
#endif
    
    return FAT16_ERR_FILE_NOT_FOUND;
     722:	0f 90       	pop	r0
     724:	0f 90       	pop	r0
     726:	0f 90       	pop	r0
     728:	0f 90       	pop	r0
     72a:	0f 90       	pop	r0
     72c:	0f 90       	pop	r0
     72e:	8f ef       	ldi	r24, 0xFF	; 255
     730:	10 c0       	rjmp	.+32     	; 0x752 <fat16_open_file+0x1f6>

    do {
        bytes = fat16_read_file(sizeof(Fat16Entry));
        
        if(bytes < sizeof(Fat16Entry))
            return FAT16_ERR_FILE_READ;
     732:	8e ef       	ldi	r24, 0xFE	; 254
     734:	0e c0       	rjmp	.+28     	; 0x752 <fat16_open_file+0x1f6>
                break;        
        if(i < 8) // not the filename we are looking for
            continue;
		
        for(i=0; i<3; i++) // we don't have memcmp on a MCU...
            if(FAT16_entry->ext[i] != ext[i])
     736:	f4 01       	movw	r30, r8
     738:	90 85       	ldd	r25, Z+8	; 0x08
     73a:	f8 01       	movw	r30, r16
     73c:	80 81       	ld	r24, Z
     73e:	98 13       	cpse	r25, r24
     740:	dc cf       	rjmp	.-72     	; 0x6fa <fat16_open_file+0x19e>
     742:	f4 01       	movw	r30, r8
     744:	91 85       	ldd	r25, Z+9	; 0x09
     746:	f8 01       	movw	r30, r16
     748:	81 81       	ldd	r24, Z+1	; 0x01
     74a:	98 17       	cp	r25, r24
     74c:	09 f4       	brne	.+2      	; 0x750 <fat16_open_file+0x1f4>
     74e:	6e cf       	rjmp	.-292    	; 0x62c <fat16_open_file+0xd0>
     750:	d4 cf       	rjmp	.-88     	; 0x6fa <fat16_open_file+0x19e>
#ifdef DEBUG    
    printf("File not found: [%s.%s]!\n", filename, ext);
#endif
    
    return FAT16_ERR_FILE_NOT_FOUND;
}
     752:	df 91       	pop	r29
     754:	cf 91       	pop	r28
     756:	1f 91       	pop	r17
     758:	0f 91       	pop	r16
     75a:	ff 90       	pop	r15
     75c:	ef 90       	pop	r14
     75e:	df 90       	pop	r13
     760:	cf 90       	pop	r12
     762:	bf 90       	pop	r11
     764:	af 90       	pop	r10
     766:	9f 90       	pop	r9
     768:	8f 90       	pop	r8
     76a:	7f 90       	pop	r7
     76c:	6f 90       	pop	r6
     76e:	5f 90       	pop	r5
     770:	4f 90       	pop	r4
     772:	08 95       	ret

00000774 <uart_putch>:

	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
}

int uart_putch(char ch,FILE *stream)
{
     774:	cf 93       	push	r28
     776:	c8 2f       	mov	r28, r24
	if (ch == '\n')
     778:	8a 30       	cpi	r24, 0x0A	; 10
     77a:	19 f4       	brne	.+6      	; 0x782 <uart_putch+0xe>
	uart_putch('\r', stream);
     77c:	8d e0       	ldi	r24, 0x0D	; 13
     77e:	0e 94 ba 03 	call	0x774	; 0x774 <uart_putch>

	while (!(UCSR0A & (1<<UDRE0)));
     782:	e0 ec       	ldi	r30, 0xC0	; 192
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	90 81       	ld	r25, Z
     788:	95 ff       	sbrs	r25, 5
     78a:	fd cf       	rjmp	.-6      	; 0x786 <uart_putch+0x12>
	UDR0=ch;
     78c:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	return 0;
}
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	cf 91       	pop	r28
     796:	08 95       	ret

00000798 <uart_getch>:

int uart_getch(FILE *stream)
{
     798:	cf 93       	push	r28
     79a:	bc 01       	movw	r22, r24
	unsigned char ch;

	while (!(UCSR0A & (1<<RXC0)));
     79c:	e0 ec       	ldi	r30, 0xC0	; 192
     79e:	f0 e0       	ldi	r31, 0x00	; 0
     7a0:	90 81       	ld	r25, Z
     7a2:	99 23       	and	r25, r25
     7a4:	ec f7       	brge	.-6      	; 0x7a0 <uart_getch+0x8>
	ch=UDR0;
     7a6:	c0 91 c6 00 	lds	r28, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>

	/* Echo the Output Back to terminal */
	uart_putch(ch,stream);
     7aa:	8c 2f       	mov	r24, r28
     7ac:	0e 94 ba 03 	call	0x774	; 0x774 <uart_putch>

	return ch;
}
     7b0:	8c 2f       	mov	r24, r28
     7b2:	90 e0       	ldi	r25, 0x00	; 0
     7b4:	cf 91       	pop	r28
     7b6:	08 95       	ret

000007b8 <SPI_init>:
#endif


void SPI_init() {
	
	DDRB |= (1<<PORTB2); // Set SS as Output
     7b8:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<PORTB2); //Set SS as Output
     7ba:	2a 9a       	sbi	0x05, 2	; 5
	SD_CS_DDR |= SD_CS; // SD card circuit select as output
     7bc:	54 9a       	sbi	0x0a, 4	; 10
	SPI_DDR |= SPI_MOSI + SPI_SCK; // MOSI and SCK as outputs
     7be:	84 b1       	in	r24, 0x04	; 4
     7c0:	88 62       	ori	r24, 0x28	; 40
     7c2:	84 b9       	out	0x04, r24	; 4
	SPI_PORT |= SPI_MISO; // pullup in MISO, might not be needed
     7c4:	2c 9a       	sbi	0x05, 4	; 5
	
	// Enable SPI, master, set clock rate fck/16
	SPCR = (1<<SPE) | (1<<MSTR) |  (1<<SPR0);
     7c6:	81 e5       	ldi	r24, 0x51	; 81
     7c8:	8c bd       	out	0x2c, r24	; 44
     7ca:	08 95       	ret

000007cc <uart_init>:
//UART Config
#if _DEBUG_MODE

void uart_init(void)
{
	UBRR0H = (((F_CPU/BAUD_RATE)/16)-1)>>8;		// set baud rate
     7cc:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = (((F_CPU/BAUD_RATE)/16)-1);
     7d0:	80 e1       	ldi	r24, 0x10	; 16
     7d2:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
	UCSR0B = (1<<RXEN0)|(1<<TXEN0); 			// enable Rx & Tx
     7d6:	88 e1       	ldi	r24, 0x18	; 24
     7d8:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
	UCSR0C=  (1<<UCSZ01)|(1<<UCSZ00);  	        // config USART; 8N1
     7dc:	86 e0       	ldi	r24, 0x06	; 6
     7de:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
     7e2:	08 95       	ret

000007e4 <uart_flush>:

void uart_flush(void)
{
	unsigned char dummy;

	while (UCSR0A & (1<<RXC0)) dummy = UDR0;
     7e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
     7e8:	88 23       	and	r24, r24
     7ea:	44 f4       	brge	.+16     	; 0x7fc <uart_flush+0x18>
     7ec:	a6 ec       	ldi	r26, 0xC6	; 198
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	e0 ec       	ldi	r30, 0xC0	; 192
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	8c 91       	ld	r24, X
     7f6:	80 81       	ld	r24, Z
     7f8:	88 23       	and	r24, r24
     7fa:	e4 f3       	brlt	.-8      	; 0x7f4 <uart_flush+0x10>
     7fc:	08 95       	ret

000007fe <ansi_cl>:

	return ch;
}

void ansi_cl(void)
{
     7fe:	cf 93       	push	r28
     800:	df 93       	push	r29
	// ANSI clear screen: cl=\E[H\E[J
	putchar(27);
     802:	cf ee       	ldi	r28, 0xEF	; 239
     804:	d2 e0       	ldi	r29, 0x02	; 2
     806:	6a 81       	ldd	r22, Y+2	; 0x02
     808:	7b 81       	ldd	r23, Y+3	; 0x03
     80a:	8b e1       	ldi	r24, 0x1B	; 27
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
	putchar('[');
     812:	6a 81       	ldd	r22, Y+2	; 0x02
     814:	7b 81       	ldd	r23, Y+3	; 0x03
     816:	8b e5       	ldi	r24, 0x5B	; 91
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
	putchar('H');
     81e:	6a 81       	ldd	r22, Y+2	; 0x02
     820:	7b 81       	ldd	r23, Y+3	; 0x03
     822:	88 e4       	ldi	r24, 0x48	; 72
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
	putchar(27);
     82a:	6a 81       	ldd	r22, Y+2	; 0x02
     82c:	7b 81       	ldd	r23, Y+3	; 0x03
     82e:	8b e1       	ldi	r24, 0x1B	; 27
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
	putchar('[');
     836:	6a 81       	ldd	r22, Y+2	; 0x02
     838:	7b 81       	ldd	r23, Y+3	; 0x03
     83a:	8b e5       	ldi	r24, 0x5B	; 91
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
	putchar('J');
     842:	6a 81       	ldd	r22, Y+2	; 0x02
     844:	7b 81       	ldd	r23, Y+3	; 0x03
     846:	8a e4       	ldi	r24, 0x4A	; 74
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
}
     84e:	df 91       	pop	r29
     850:	cf 91       	pop	r28
     852:	08 95       	ret

00000854 <ansi_me>:

void ansi_me(void)
{
     854:	cf 93       	push	r28
     856:	df 93       	push	r29
	// ANSI turn off all attribute: me=\E[0m
	putchar(27);
     858:	cf ee       	ldi	r28, 0xEF	; 239
     85a:	d2 e0       	ldi	r29, 0x02	; 2
     85c:	6a 81       	ldd	r22, Y+2	; 0x02
     85e:	7b 81       	ldd	r23, Y+3	; 0x03
     860:	8b e1       	ldi	r24, 0x1B	; 27
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
	putchar('[');
     868:	6a 81       	ldd	r22, Y+2	; 0x02
     86a:	7b 81       	ldd	r23, Y+3	; 0x03
     86c:	8b e5       	ldi	r24, 0x5B	; 91
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
	putchar('0');
     874:	6a 81       	ldd	r22, Y+2	; 0x02
     876:	7b 81       	ldd	r23, Y+3	; 0x03
     878:	80 e3       	ldi	r24, 0x30	; 48
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
	putchar('m');
     880:	6a 81       	ldd	r22, Y+2	; 0x02
     882:	7b 81       	ldd	r23, Y+3	; 0x03
     884:	8d e6       	ldi	r24, 0x6D	; 109
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
}
     88c:	df 91       	pop	r29
     88e:	cf 91       	pop	r28
     890:	08 95       	ret

00000892 <main>:
#if _DEBUG_MODE
// Assign I/O stream to UART
FILE uart_str = FDEV_SETUP_STREAM(uart_putch, uart_getch, _FDEV_SETUP_RW);
#endif

int main(int argc, char *argv[]) {
     892:	cf 92       	push	r12
     894:	df 92       	push	r13
     896:	ef 92       	push	r14
     898:	ff 92       	push	r15
     89a:	0f 93       	push	r16
     89c:	1f 93       	push	r17
     89e:	cf 93       	push	r28
     8a0:	df 93       	push	r29
	unsigned int i, ret;
	//short offset = 0x1BE;

#if _DEBUG_MODE
    // Define Output/Input Stream
    stdout = stdin = &uart_str;
     8a2:	ef ee       	ldi	r30, 0xEF	; 239
     8a4:	f2 e0       	ldi	r31, 0x02	; 2
     8a6:	80 e0       	ldi	r24, 0x00	; 0
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	91 83       	std	Z+1, r25	; 0x01
     8ac:	80 83       	st	Z, r24
     8ae:	93 83       	std	Z+3, r25	; 0x03
     8b0:	82 83       	std	Z+2, r24	; 0x02
    // Initial UART Peripheral
    uart_init();
     8b2:	0e 94 e6 03 	call	0x7cc	; 0x7cc <uart_init>
    // Clear Screen
    ansi_me();
     8b6:	0e 94 2a 04 	call	0x854	; 0x854 <ansi_me>
    ansi_cl();
     8ba:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ansi_cl>
    ansi_me();
     8be:	0e 94 2a 04 	call	0x854	; 0x854 <ansi_me>
    ansi_cl();
     8c2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <ansi_cl>
    uart_flush();
     8c6:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <uart_flush>
#endif

#if _DEBUG_MODE
#endif

	SPI_init();
     8ca:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <SPI_init>
	
	   printf("\nStart\r\n");
     8ce:	86 e7       	ldi	r24, 0x76	; 118
     8d0:	92 e0       	ldi	r25, 0x02	; 2
     8d2:	0e 94 35 07 	call	0xe6a	; 0xe6a <puts>

	if((ret = SD_init())) {
     8d6:	0e 94 5f 05 	call	0xabe	; 0xabe <SD_init>
     8da:	c8 2f       	mov	r28, r24
     8dc:	88 23       	and	r24, r24
     8de:	b9 f0       	breq	.+46     	; 0x90e <__stack+0xf>
		
		printf("\r\nSD err: ");
     8e0:	8e e7       	ldi	r24, 0x7E	; 126
     8e2:	92 e0       	ldi	r25, 0x02	; 2
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
		printf("%#X",ret);
     8ec:	1f 92       	push	r1
     8ee:	cf 93       	push	r28
     8f0:	89 e8       	ldi	r24, 0x89	; 137
     8f2:	92 e0       	ldi	r25, 0x02	; 2
     8f4:	9f 93       	push	r25
     8f6:	8f 93       	push	r24
     8f8:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
		return -1;
     8fc:	0f 90       	pop	r0
     8fe:	0f 90       	pop	r0
     900:	0f 90       	pop	r0
     902:	0f 90       	pop	r0
     904:	0f 90       	pop	r0
     906:	0f 90       	pop	r0
     908:	8f ef       	ldi	r24, 0xFF	; 255
     90a:	9f ef       	ldi	r25, 0xFF	; 255
     90c:	66 c0       	rjmp	.+204    	; 0x9da <__stack+0xdb>
	}
	
	if((ret = fat16_init())) {
     90e:	0e 94 53 00 	call	0xa6	; 0xa6 <fat16_init>
     912:	c8 2f       	mov	r28, r24
     914:	88 23       	and	r24, r24
     916:	b9 f0       	breq	.+46     	; 0x946 <__stack+0x47>
		printf("\r\nFAT err: ");
     918:	8d e8       	ldi	r24, 0x8D	; 141
     91a:	92 e0       	ldi	r25, 0x02	; 2
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
		printf("%#X",ret);
     924:	1f 92       	push	r1
     926:	cf 93       	push	r28
     928:	89 e8       	ldi	r24, 0x89	; 137
     92a:	92 e0       	ldi	r25, 0x02	; 2
     92c:	9f 93       	push	r25
     92e:	8f 93       	push	r24
     930:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
		return -1;
     934:	0f 90       	pop	r0
     936:	0f 90       	pop	r0
     938:	0f 90       	pop	r0
     93a:	0f 90       	pop	r0
     93c:	0f 90       	pop	r0
     93e:	0f 90       	pop	r0
     940:	8f ef       	ldi	r24, 0xFF	; 255
     942:	9f ef       	ldi	r25, 0xFF	; 255
     944:	4a c0       	rjmp	.+148    	; 0x9da <__stack+0xdb>
	}
	
	if((ret = fat16_open_file("HAMLET  ", "TXT"))) {
     946:	69 e9       	ldi	r22, 0x99	; 153
     948:	72 e0       	ldi	r23, 0x02	; 2
     94a:	8d e9       	ldi	r24, 0x9D	; 157
     94c:	92 e0       	ldi	r25, 0x02	; 2
     94e:	0e 94 ae 02 	call	0x55c	; 0x55c <fat16_open_file>
     952:	c8 2f       	mov	r28, r24
     954:	88 23       	and	r24, r24
     956:	51 f1       	breq	.+84     	; 0x9ac <__stack+0xad>
		printf("\r\nOpen error: ");
     958:	86 ea       	ldi	r24, 0xA6	; 166
     95a:	92 e0       	ldi	r25, 0x02	; 2
     95c:	9f 93       	push	r25
     95e:	8f 93       	push	r24
     960:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
		printf("%#X",ret);
     964:	1f 92       	push	r1
     966:	cf 93       	push	r28
     968:	89 e8       	ldi	r24, 0x89	; 137
     96a:	92 e0       	ldi	r25, 0x02	; 2
     96c:	9f 93       	push	r25
     96e:	8f 93       	push	r24
     970:	0e 94 18 07 	call	0xe30	; 0xe30 <printf>
		return -1;
     974:	0f 90       	pop	r0
     976:	0f 90       	pop	r0
     978:	0f 90       	pop	r0
     97a:	0f 90       	pop	r0
     97c:	0f 90       	pop	r0
     97e:	0f 90       	pop	r0
     980:	8f ef       	ldi	r24, 0xFF	; 255
     982:	9f ef       	ldi	r25, 0xFF	; 255
     984:	2a c0       	rjmp	.+84     	; 0x9da <__stack+0xdb>
	}
	
	while(fat16_state.file_left) {
		ret = fat16_read_file(FAT16_BUFFER_SIZE);
     986:	80 e2       	ldi	r24, 0x20	; 32
     988:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <fat16_read_file>
     98c:	08 2f       	mov	r16, r24
     98e:	10 e0       	ldi	r17, 0x00	; 0
		for(i=0; i<ret; i++)
     990:	01 15       	cp	r16, r1
     992:	11 05       	cpc	r17, r1
     994:	b9 f0       	breq	.+46     	; 0x9c4 <__stack+0xc5>
     996:	e6 01       	movw	r28, r12
     998:	0a 54       	subi	r16, 0x4A	; 74
     99a:	1d 4f       	sbci	r17, 0xFD	; 253
		printf("%c",fat16_buffer[i]);
     99c:	89 91       	ld	r24, Y+
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 2e 07 	call	0xe5c	; 0xe5c <putchar>
		return -1;
	}
	
	while(fat16_state.file_left) {
		ret = fat16_read_file(FAT16_BUFFER_SIZE);
		for(i=0; i<ret; i++)
     9a4:	c0 17       	cp	r28, r16
     9a6:	d1 07       	cpc	r29, r17
     9a8:	c9 f7       	brne	.-14     	; 0x99c <__stack+0x9d>
     9aa:	0c c0       	rjmp	.+24     	; 0x9c4 <__stack+0xc5>
		printf("\r\nOpen error: ");
		printf("%#X",ret);
		return -1;
	}
	
	while(fat16_state.file_left) {
     9ac:	0f 2e       	mov	r0, r31
     9ae:	f6 ed       	ldi	r31, 0xD6	; 214
     9b0:	ef 2e       	mov	r14, r31
     9b2:	f2 e0       	ldi	r31, 0x02	; 2
     9b4:	ff 2e       	mov	r15, r31
     9b6:	f0 2d       	mov	r31, r0
     9b8:	0f 2e       	mov	r0, r31
     9ba:	f6 eb       	ldi	r31, 0xB6	; 182
     9bc:	cf 2e       	mov	r12, r31
     9be:	f2 e0       	ldi	r31, 0x02	; 2
     9c0:	df 2e       	mov	r13, r31
     9c2:	f0 2d       	mov	r31, r0
     9c4:	f7 01       	movw	r30, r14
     9c6:	87 85       	ldd	r24, Z+15	; 0x0f
     9c8:	90 89       	ldd	r25, Z+16	; 0x10
     9ca:	a1 89       	ldd	r26, Z+17	; 0x11
     9cc:	b2 89       	ldd	r27, Z+18	; 0x12
     9ce:	89 2b       	or	r24, r25
     9d0:	8a 2b       	or	r24, r26
     9d2:	8b 2b       	or	r24, r27
     9d4:	c1 f6       	brne	.-80     	; 0x986 <__stack+0x87>
		ret = fat16_read_file(FAT16_BUFFER_SIZE);
		for(i=0; i<ret; i++)
		printf("%c",fat16_buffer[i]);
	}
	
	return 0;
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	90 e0       	ldi	r25, 0x00	; 0
}
     9da:	df 91       	pop	r29
     9dc:	cf 91       	pop	r28
     9de:	1f 91       	pop	r17
     9e0:	0f 91       	pop	r16
     9e2:	ff 90       	pop	r15
     9e4:	ef 90       	pop	r14
     9e6:	df 90       	pop	r13
     9e8:	cf 90       	pop	r12
     9ea:	08 95       	ret

000009ec <SPI_WR_RD>:
#include <util/delay.h>
#include <avr/io.h>


unsigned char SPI_WR_RD(unsigned char ch) {
	SPDR = ch;
     9ec:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF))) {}
     9ee:	0d b4       	in	r0, 0x2d	; 45
     9f0:	07 fe       	sbrs	r0, 7
     9f2:	fd cf       	rjmp	.-6      	; 0x9ee <SPI_WR_RD+0x2>
	return SPDR;
     9f4:	8e b5       	in	r24, 0x2e	; 46
}
     9f6:	08 95       	ret

000009f8 <SD_command>:

unsigned char SD_command(unsigned char cmd, unsigned long arg, unsigned char crc, unsigned char read) {
     9f8:	cf 92       	push	r12
     9fa:	df 92       	push	r13
     9fc:	ef 92       	push	r14
     9fe:	ff 92       	push	r15
     a00:	0f 93       	push	r16
     a02:	1f 93       	push	r17
     a04:	cf 93       	push	r28
     a06:	df 93       	push	r29
     a08:	cd b7       	in	r28, 0x3d	; 61
     a0a:	de b7       	in	r29, 0x3e	; 62
     a0c:	a0 97       	sbiw	r28, 0x20	; 32
     a0e:	0f b6       	in	r0, 0x3f	; 63
     a10:	f8 94       	cli
     a12:	de bf       	out	0x3e, r29	; 62
     a14:	0f be       	out	0x3f, r0	; 63
     a16:	cd bf       	out	0x3d, r28	; 61
     a18:	f4 2e       	mov	r15, r20
     a1a:	e5 2e       	mov	r14, r21
     a1c:	d6 2e       	mov	r13, r22
     a1e:	c7 2e       	mov	r12, r23
     a20:	12 2f       	mov	r17, r18
	#if _DEBUG_MODE
	unsigned char cmd_nb = cmd&0x3F;
	printf("SD CMD%d: ",cmd_nb);
	#endif
	
	SD_CS_ENABLE();
     a22:	5c 98       	cbi	0x0b, 4	; 11
	SPI_WR_RD(cmd);
     a24:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(arg>>24);
     a28:	8c 2d       	mov	r24, r12
     a2a:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(arg>>16);
     a2e:	8d 2d       	mov	r24, r13
     a30:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(arg>>8);
     a34:	8e 2d       	mov	r24, r14
     a36:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(arg);
     a3a:	8f 2d       	mov	r24, r15
     a3c:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(crc);
     a40:	81 2f       	mov	r24, r17
     a42:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	
	for(i=0; i<read; i++)
     a46:	00 23       	and	r16, r16
     a48:	01 f1       	breq	.+64     	; 0xa8a <SD_command+0x92>
     a4a:	ce 01       	movw	r24, r28
     a4c:	01 96       	adiw	r24, 0x01	; 1
     a4e:	7c 01       	movw	r14, r24
     a50:	01 50       	subi	r16, 0x01	; 1
     a52:	c0 2e       	mov	r12, r16
     a54:	d1 2c       	mov	r13, r1
     a56:	9f ef       	ldi	r25, 0xFF	; 255
     a58:	c9 1a       	sub	r12, r25
     a5a:	d9 0a       	sbc	r13, r25
     a5c:	ce 0c       	add	r12, r14
     a5e:	df 1c       	adc	r13, r15
     a60:	87 01       	movw	r16, r14
	buffer[i] = SPI_WR_RD(0xFF);
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
     a68:	f8 01       	movw	r30, r16
     a6a:	81 93       	st	Z+, r24
     a6c:	8f 01       	movw	r16, r30
	SPI_WR_RD(arg>>16);
	SPI_WR_RD(arg>>8);
	SPI_WR_RD(arg);
	SPI_WR_RD(crc);
	
	for(i=0; i<read; i++)
     a6e:	ec 15       	cp	r30, r12
     a70:	fd 05       	cpc	r31, r13
     a72:	b9 f7       	brne	.-18     	; 0xa62 <SD_command+0x6a>
     a74:	0d c0       	rjmp	.+26     	; 0xa90 <SD_command+0x98>
		
		printf("%02X",buffer[i]);
		
		#endif
		
		if(buffer[i] != 0xFF)
     a76:	f7 01       	movw	r30, r14
     a78:	91 91       	ld	r25, Z+
     a7a:	7f 01       	movw	r14, r30
     a7c:	9f 3f       	cpi	r25, 0xFF	; 255
     a7e:	09 f0       	breq	.+2      	; 0xa82 <SD_command+0x8a>
		ret = buffer[i];
     a80:	19 2f       	mov	r17, r25
	for(i=0; i<read; i++)
	buffer[i] = SPI_WR_RD(0xFF);
	
	SD_CS_DISABLE();
	
	for(i=0; i<read; i++) {
     a82:	ec 14       	cp	r14, r12
     a84:	fd 04       	cpc	r15, r13
     a86:	b9 f7       	brne	.-18     	; 0xa76 <SD_command+0x7e>
     a88:	06 c0       	rjmp	.+12     	; 0xa96 <SD_command+0x9e>
	SPI_WR_RD(crc);
	
	for(i=0; i<read; i++)
	buffer[i] = SPI_WR_RD(0xFF);
	
	SD_CS_DISABLE();
     a8a:	5c 9a       	sbi	0x0b, 4	; 11
	while(!(SPSR & (1<<SPIF))) {}
	return SPDR;
}

unsigned char SD_command(unsigned char cmd, unsigned long arg, unsigned char crc, unsigned char read) {
	unsigned char i, buffer[32], ret = 0xFF;
     a8c:	1f ef       	ldi	r17, 0xFF	; 255
     a8e:	03 c0       	rjmp	.+6      	; 0xa96 <SD_command+0x9e>
	SPI_WR_RD(crc);
	
	for(i=0; i<read; i++)
	buffer[i] = SPI_WR_RD(0xFF);
	
	SD_CS_DISABLE();
     a90:	5c 9a       	sbi	0x0b, 4	; 11
     a92:	1f ef       	ldi	r17, 0xFF	; 255
     a94:	f0 cf       	rjmp	.-32     	; 0xa76 <SD_command+0x7e>
		
		if(buffer[i] != 0xFF)
		ret = buffer[i];
	}
	
	printf("\n");
     a96:	8a e0       	ldi	r24, 0x0A	; 10
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	0e 94 2e 07 	call	0xe5c	; 0xe5c <putchar>
	
	return ret;
}
     a9e:	81 2f       	mov	r24, r17
     aa0:	a0 96       	adiw	r28, 0x20	; 32
     aa2:	0f b6       	in	r0, 0x3f	; 63
     aa4:	f8 94       	cli
     aa6:	de bf       	out	0x3e, r29	; 62
     aa8:	0f be       	out	0x3f, r0	; 63
     aaa:	cd bf       	out	0x3d, r28	; 61
     aac:	df 91       	pop	r29
     aae:	cf 91       	pop	r28
     ab0:	1f 91       	pop	r17
     ab2:	0f 91       	pop	r16
     ab4:	ff 90       	pop	r15
     ab6:	ef 90       	pop	r14
     ab8:	df 90       	pop	r13
     aba:	cf 90       	pop	r12
     abc:	08 95       	ret

00000abe <SD_init>:

unsigned long sd_sector;
unsigned short sd_pos;

char SD_init() {
     abe:	0f 93       	push	r16
     ac0:	cf 93       	push	r28
     ac2:	df 93       	push	r29
	unsigned int i;
	
	// ]r:10
	SD_CS_DISABLE();
     ac4:	5c 9a       	sbi	0x0b, 4	; 11
     ac6:	ca e0       	ldi	r28, 0x0A	; 10
     ac8:	d0 e0       	ldi	r29, 0x00	; 0
	for(i=0; i<10; i++) // idle for 1 bytes / 80 clocks
	SPI_WR_RD(0xFF);
     aca:	8f ef       	ldi	r24, 0xFF	; 255
     acc:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
     ad0:	21 97       	sbiw	r28, 0x01	; 1
char SD_init() {
	unsigned int i;
	
	// ]r:10
	SD_CS_DISABLE();
	for(i=0; i<10; i++) // idle for 1 bytes / 80 clocks
     ad2:	d9 f7       	brne	.-10     	; 0xaca <SD_init+0xc>
     ad4:	c0 e0       	ldi	r28, 0x00	; 0
     ad6:	d0 e0       	ldi	r29, 0x00	; 0
     ad8:	0a c0       	rjmp	.+20     	; 0xaee <SD_init+0x30>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ada:	8f e3       	ldi	r24, 0x3F	; 63
     adc:	9c e9       	ldi	r25, 0x9C	; 156
     ade:	01 97       	sbiw	r24, 0x01	; 1
     ae0:	f1 f7       	brne	.-4      	; 0xade <SD_init+0x20>
     ae2:	00 c0       	rjmp	.+0      	; 0xae4 <SD_init+0x26>
     ae4:	00 00       	nop
	SPI_WR_RD(0xFF);
	
	// [0x40 0x00 0x00 0x00 0x00 0x95 r:8] until we get "1"
	for(i=0; i<64 && SD_command(0x40, 0x00000000, 0x95, 8) != 1; i++)
     ae6:	21 96       	adiw	r28, 0x01	; 1
     ae8:	c0 34       	cpi	r28, 0x40	; 64
     aea:	d1 05       	cpc	r29, r1
     aec:	b9 f0       	breq	.+46     	; 0xb1c <SD_init+0x5e>
     aee:	08 e0       	ldi	r16, 0x08	; 8
     af0:	25 e9       	ldi	r18, 0x95	; 149
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	ba 01       	movw	r22, r20
     af8:	80 e4       	ldi	r24, 0x40	; 64
     afa:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <SD_command>
     afe:	81 30       	cpi	r24, 0x01	; 1
     b00:	61 f7       	brne	.-40     	; 0xada <SD_init+0x1c>
     b02:	3a c0       	rjmp	.+116    	; 0xb78 <SD_init+0xba>
     b04:	8f e3       	ldi	r24, 0x3F	; 63
     b06:	9c e9       	ldi	r25, 0x9C	; 156
     b08:	01 97       	sbiw	r24, 0x01	; 1
     b0a:	f1 f7       	brne	.-4      	; 0xb08 <SD_init+0x4a>
     b0c:	00 c0       	rjmp	.+0      	; 0xb0e <SD_init+0x50>
     b0e:	00 00       	nop
	
	if(i == 10) // card did not respond to initialization
	return -1;
	
	// CMD1 until card comes out of idle, but maximum of 10 times
	for(i=0; i<10 && SD_command(0x41, 0x00000000, 0xFF, 8) != 0; i++)
     b10:	21 96       	adiw	r28, 0x01	; 1
     b12:	ca 30       	cpi	r28, 0x0A	; 10
     b14:	d1 05       	cpc	r29, r1
     b16:	21 f4       	brne	.+8      	; 0xb20 <SD_init+0x62>
	_delay_ms(10);

	if(i == 10) // card did not come out of idle
	return -2;
     b18:	8e ef       	ldi	r24, 0xFE	; 254
     b1a:	31 c0       	rjmp	.+98     	; 0xb7e <SD_init+0xc0>
     b1c:	c0 e0       	ldi	r28, 0x00	; 0
     b1e:	d0 e0       	ldi	r29, 0x00	; 0
	
	if(i == 10) // card did not respond to initialization
	return -1;
	
	// CMD1 until card comes out of idle, but maximum of 10 times
	for(i=0; i<10 && SD_command(0x41, 0x00000000, 0xFF, 8) != 0; i++)
     b20:	08 e0       	ldi	r16, 0x08	; 8
     b22:	2f ef       	ldi	r18, 0xFF	; 255
     b24:	40 e0       	ldi	r20, 0x00	; 0
     b26:	50 e0       	ldi	r21, 0x00	; 0
     b28:	ba 01       	movw	r22, r20
     b2a:	81 e4       	ldi	r24, 0x41	; 65
     b2c:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <SD_command>
     b30:	81 11       	cpse	r24, r1
     b32:	e8 cf       	rjmp	.-48     	; 0xb04 <SD_init+0x46>
	_delay_ms(10);

	if(i == 10) // card did not come out of idle
     b34:	2a 97       	sbiw	r28, 0x0a	; 10
     b36:	e1 f0       	breq	.+56     	; 0xb70 <SD_init+0xb2>
	return -2;
	
	// SET_BLOCKLEN to 512
	SD_command(0x50, 0x00000200, 0xFF, 8);
     b38:	2f ef       	ldi	r18, 0xFF	; 255
     b3a:	40 e0       	ldi	r20, 0x00	; 0
     b3c:	52 e0       	ldi	r21, 0x02	; 2
     b3e:	60 e0       	ldi	r22, 0x00	; 0
     b40:	70 e0       	ldi	r23, 0x00	; 0
     b42:	80 e5       	ldi	r24, 0x50	; 80
     b44:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <SD_command>
	
	sd_sector = sd_pos = 0;
     b48:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <sd_pos+0x1>
     b4c:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <sd_pos>
     b50:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <sd_sector>
     b54:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <sd_sector+0x1>
     b58:	10 92 eb 02 	sts	0x02EB, r1	; 0x8002eb <sd_sector+0x2>
     b5c:	10 92 ec 02 	sts	0x02EC, r1	; 0x8002ec <sd_sector+0x3>
     b60:	8f e3       	ldi	r24, 0x3F	; 63
     b62:	9c e9       	ldi	r25, 0x9C	; 156
     b64:	01 97       	sbiw	r24, 0x01	; 1
     b66:	f1 f7       	brne	.-4      	; 0xb64 <SD_init+0xa6>
     b68:	00 c0       	rjmp	.+0      	; 0xb6a <SD_init+0xac>
     b6a:	00 00       	nop
	
	_delay_ms(10);
	
	return 0;
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	07 c0       	rjmp	.+14     	; 0xb7e <SD_init+0xc0>
	// CMD1 until card comes out of idle, but maximum of 10 times
	for(i=0; i<10 && SD_command(0x41, 0x00000000, 0xFF, 8) != 0; i++)
	_delay_ms(10);

	if(i == 10) // card did not come out of idle
	return -2;
     b70:	8e ef       	ldi	r24, 0xFE	; 254
     b72:	05 c0       	rjmp	.+10     	; 0xb7e <SD_init+0xc0>
	// [0x40 0x00 0x00 0x00 0x00 0x95 r:8] until we get "1"
	for(i=0; i<64 && SD_command(0x40, 0x00000000, 0x95, 8) != 1; i++)
	_delay_ms(10);
	
	if(i == 10) // card did not respond to initialization
	return -1;
     b74:	8f ef       	ldi	r24, 0xFF	; 255
     b76:	03 c0       	rjmp	.+6      	; 0xb7e <SD_init+0xc0>
	
	// [0x40 0x00 0x00 0x00 0x00 0x95 r:8] until we get "1"
	for(i=0; i<64 && SD_command(0x40, 0x00000000, 0x95, 8) != 1; i++)
	_delay_ms(10);
	
	if(i == 10) // card did not respond to initialization
     b78:	2a 97       	sbiw	r28, 0x0a	; 10
     b7a:	e1 f3       	breq	.-8      	; 0xb74 <SD_init+0xb6>
     b7c:	cf cf       	rjmp	.-98     	; 0xb1c <SD_init+0x5e>
	sd_sector = sd_pos = 0;
	
	_delay_ms(10);
	
	return 0;
}
     b7e:	df 91       	pop	r29
     b80:	cf 91       	pop	r28
     b82:	0f 91       	pop	r16
     b84:	08 95       	ret

00000b86 <SD_read>:

// TODO: This function will not exit gracefully if SD card does not do what it should
void SD_read(unsigned long sector, unsigned short offset, unsigned char * buffer, unsigned short len) {
     b86:	4f 92       	push	r4
     b88:	5f 92       	push	r5
     b8a:	6f 92       	push	r6
     b8c:	7f 92       	push	r7
     b8e:	af 92       	push	r10
     b90:	bf 92       	push	r11
     b92:	cf 92       	push	r12
     b94:	df 92       	push	r13
     b96:	ef 92       	push	r14
     b98:	ff 92       	push	r15
     b9a:	0f 93       	push	r16
     b9c:	1f 93       	push	r17
     b9e:	cf 93       	push	r28
     ba0:	df 93       	push	r29
     ba2:	2b 01       	movw	r4, r22
     ba4:	3c 01       	movw	r6, r24
     ba6:	7a 01       	movw	r14, r20
     ba8:	b2 2e       	mov	r11, r18
     baa:	a3 2e       	mov	r10, r19
	unsigned int i, pos = 0;
	
	SD_CS_ENABLE();
     bac:	5c 98       	cbi	0x0b, 4	; 11
	SPI_WR_RD(0x51);
     bae:	81 e5       	ldi	r24, 0x51	; 81
     bb0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(sector>>15); // sector*512 >> 24
     bb4:	d3 01       	movw	r26, r6
     bb6:	c2 01       	movw	r24, r4
     bb8:	07 2e       	mov	r0, r23
     bba:	7f e0       	ldi	r23, 0x0F	; 15
     bbc:	b6 95       	lsr	r27
     bbe:	a7 95       	ror	r26
     bc0:	97 95       	ror	r25
     bc2:	87 95       	ror	r24
     bc4:	7a 95       	dec	r23
     bc6:	d1 f7       	brne	.-12     	; 0xbbc <SD_read+0x36>
     bc8:	70 2d       	mov	r23, r0
     bca:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(sector>>7);  // sector*512 >> 16
     bce:	d3 01       	movw	r26, r6
     bd0:	c2 01       	movw	r24, r4
     bd2:	68 94       	set
     bd4:	16 f8       	bld	r1, 6
     bd6:	b6 95       	lsr	r27
     bd8:	a7 95       	ror	r26
     bda:	97 95       	ror	r25
     bdc:	87 95       	ror	r24
     bde:	16 94       	lsr	r1
     be0:	d1 f7       	brne	.-12     	; 0xbd6 <SD_read+0x50>
     be2:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(sector<<1);  // sector*512 >> 8
     be6:	84 2d       	mov	r24, r4
     be8:	88 0f       	add	r24, r24
     bea:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(0);          // sector*512
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(0xFF);
     bf4:	8f ef       	ldi	r24, 0xFF	; 255
     bf6:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
     bfa:	c4 e6       	ldi	r28, 0x64	; 100
     bfc:	d0 e0       	ldi	r29, 0x00	; 0
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <SD_read+0x7e>
     c00:	21 97       	sbiw	r28, 0x01	; 1
	
	for(i=0; i<100 && !(SPI_WR_RD(0xFF) == 0x00); i++) {} // wait for 0
     c02:	71 f0       	breq	.+28     	; 0xc20 <SD_read+0x9a>
     c04:	8f ef       	ldi	r24, 0xFF	; 255
     c06:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
     c0a:	81 11       	cpse	r24, r1
     c0c:	f9 cf       	rjmp	.-14     	; 0xc00 <SD_read+0x7a>
     c0e:	c4 e6       	ldi	r28, 0x64	; 100
     c10:	d0 e0       	ldi	r29, 0x00	; 0
     c12:	08 c0       	rjmp	.+16     	; 0xc24 <SD_read+0x9e>
     c14:	21 97       	sbiw	r28, 0x01	; 1
	
	for(i=0; i<100 && !(SPI_WR_RD(0xFF) == 0xFE); i++) {} // wait for data start
     c16:	31 f4       	brne	.+12     	; 0xc24 <SD_read+0x9e>
	
	for(i=0; i<offset; i++) // "skip" bytes
     c18:	e1 14       	cp	r14, r1
     c1a:	f1 04       	cpc	r15, r1
     c1c:	49 f4       	brne	.+18     	; 0xc30 <SD_read+0xaa>
     c1e:	3e c0       	rjmp	.+124    	; 0xc9c <SD_read+0x116>
     c20:	c4 e6       	ldi	r28, 0x64	; 100
     c22:	d0 e0       	ldi	r29, 0x00	; 0
	SPI_WR_RD(0);          // sector*512
	SPI_WR_RD(0xFF);
	
	for(i=0; i<100 && !(SPI_WR_RD(0xFF) == 0x00); i++) {} // wait for 0
	
	for(i=0; i<100 && !(SPI_WR_RD(0xFF) == 0xFE); i++) {} // wait for data start
     c24:	8f ef       	ldi	r24, 0xFF	; 255
     c26:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
     c2a:	8e 3f       	cpi	r24, 0xFE	; 254
     c2c:	99 f7       	brne	.-26     	; 0xc14 <SD_read+0x8e>
     c2e:	f4 cf       	rjmp	.-24     	; 0xc18 <SD_read+0x92>
	
	for(i=0; i<offset; i++) // "skip" bytes
     c30:	c0 e0       	ldi	r28, 0x00	; 0
     c32:	d0 e0       	ldi	r29, 0x00	; 0
	SPI_WR_RD(0xFF);
     c34:	8f ef       	ldi	r24, 0xFF	; 255
     c36:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	
	for(i=0; i<100 && !(SPI_WR_RD(0xFF) == 0x00); i++) {} // wait for 0
	
	for(i=0; i<100 && !(SPI_WR_RD(0xFF) == 0xFE); i++) {} // wait for data start
	
	for(i=0; i<offset; i++) // "skip" bytes
     c3a:	21 96       	adiw	r28, 0x01	; 1
     c3c:	ce 15       	cp	r28, r14
     c3e:	df 05       	cpc	r29, r15
     c40:	c9 f7       	brne	.-14     	; 0xc34 <SD_read+0xae>
	SPI_WR_RD(0xFF);
	
	for(i=0; i<len; i++) // read len bytes
     c42:	01 15       	cp	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	79 f0       	breq	.+30     	; 0xc66 <SD_read+0xe0>
     c48:	cb 2c       	mov	r12, r11
     c4a:	da 2c       	mov	r13, r10
	
	for(i=0; i<100 && !(SPI_WR_RD(0xFF) == 0x00); i++) {} // wait for 0
	
	for(i=0; i<100 && !(SPI_WR_RD(0xFF) == 0xFE); i++) {} // wait for data start
	
	for(i=0; i<offset; i++) // "skip" bytes
     c4c:	c0 e0       	ldi	r28, 0x00	; 0
     c4e:	d0 e0       	ldi	r29, 0x00	; 0
	SPI_WR_RD(0xFF);
	
	for(i=0; i<len; i++) // read len bytes
	buffer[i] = SPI_WR_RD(0xFF);
     c50:	8f ef       	ldi	r24, 0xFF	; 255
     c52:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
     c56:	f6 01       	movw	r30, r12
     c58:	81 93       	st	Z+, r24
     c5a:	6f 01       	movw	r12, r30
	for(i=0; i<100 && !(SPI_WR_RD(0xFF) == 0xFE); i++) {} // wait for data start
	
	for(i=0; i<offset; i++) // "skip" bytes
	SPI_WR_RD(0xFF);
	
	for(i=0; i<len; i++) // read len bytes
     c5c:	21 96       	adiw	r28, 0x01	; 1
     c5e:	c0 17       	cp	r28, r16
     c60:	d1 07       	cpc	r29, r17
     c62:	b0 f3       	brcs	.-20     	; 0xc50 <SD_read+0xca>
     c64:	02 c0       	rjmp	.+4      	; 0xc6a <SD_read+0xe4>
     c66:	c0 e0       	ldi	r28, 0x00	; 0
     c68:	d0 e0       	ldi	r29, 0x00	; 0
	buffer[i] = SPI_WR_RD(0xFF);
	
	for(i+=offset; i<512; i++) // "skip" again
     c6a:	ce 0d       	add	r28, r14
     c6c:	df 1d       	adc	r29, r15
     c6e:	c1 15       	cp	r28, r1
     c70:	f2 e0       	ldi	r31, 0x02	; 2
     c72:	df 07       	cpc	r29, r31
     c74:	40 f4       	brcc	.+16     	; 0xc86 <SD_read+0x100>
	SPI_WR_RD(0xFF);
     c76:	8f ef       	ldi	r24, 0xFF	; 255
     c78:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(0xFF);
	
	for(i=0; i<len; i++) // read len bytes
	buffer[i] = SPI_WR_RD(0xFF);
	
	for(i+=offset; i<512; i++) // "skip" again
     c7c:	21 96       	adiw	r28, 0x01	; 1
     c7e:	c1 15       	cp	r28, r1
     c80:	82 e0       	ldi	r24, 0x02	; 2
     c82:	d8 07       	cpc	r29, r24
     c84:	c0 f3       	brcs	.-16     	; 0xc76 <SD_read+0xf0>
	SPI_WR_RD(0xFF);
	
	// skip checksum
	SPI_WR_RD(0xFF);
     c86:	8f ef       	ldi	r24, 0xFF	; 255
     c88:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(0xFF);
     c8c:	8f ef       	ldi	r24, 0xFF	; 255
     c8e:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	SPI_WR_RD(0xFF);
     c92:	8f ef       	ldi	r24, 0xFF	; 255
     c94:	0e 94 f6 04 	call	0x9ec	; 0x9ec <SPI_WR_RD>
	
	SD_CS_DISABLE();
     c98:	5c 9a       	sbi	0x0b, 4	; 11
     c9a:	06 c0       	rjmp	.+12     	; 0xca8 <SD_read+0x122>
	for(i=0; i<100 && !(SPI_WR_RD(0xFF) == 0xFE); i++) {} // wait for data start
	
	for(i=0; i<offset; i++) // "skip" bytes
	SPI_WR_RD(0xFF);
	
	for(i=0; i<len; i++) // read len bytes
     c9c:	01 15       	cp	r16, r1
     c9e:	11 05       	cpc	r17, r1
     ca0:	99 f6       	brne	.-90     	; 0xc48 <SD_read+0xc2>
	buffer[i] = SPI_WR_RD(0xFF);
	
	for(i+=offset; i<512; i++) // "skip" again
     ca2:	c0 e0       	ldi	r28, 0x00	; 0
     ca4:	d0 e0       	ldi	r29, 0x00	; 0
     ca6:	e7 cf       	rjmp	.-50     	; 0xc76 <SD_read+0xf0>
	SPI_WR_RD(0xFF);
	SPI_WR_RD(0xFF);
	SPI_WR_RD(0xFF);
	
	SD_CS_DISABLE();
}
     ca8:	df 91       	pop	r29
     caa:	cf 91       	pop	r28
     cac:	1f 91       	pop	r17
     cae:	0f 91       	pop	r16
     cb0:	ff 90       	pop	r15
     cb2:	ef 90       	pop	r14
     cb4:	df 90       	pop	r13
     cb6:	cf 90       	pop	r12
     cb8:	bf 90       	pop	r11
     cba:	af 90       	pop	r10
     cbc:	7f 90       	pop	r7
     cbe:	6f 90       	pop	r6
     cc0:	5f 90       	pop	r5
     cc2:	4f 90       	pop	r4
     cc4:	08 95       	ret

00000cc6 <fat16_seek>:

void fat16_seek(unsigned long offset) {
     cc6:	0f 93       	push	r16
     cc8:	1f 93       	push	r17
	sd_sector = offset >> 9;
     cca:	8b 01       	movw	r16, r22
     ccc:	9c 01       	movw	r18, r24
     cce:	0f 2e       	mov	r0, r31
     cd0:	f9 e0       	ldi	r31, 0x09	; 9
     cd2:	36 95       	lsr	r19
     cd4:	27 95       	ror	r18
     cd6:	17 95       	ror	r17
     cd8:	07 95       	ror	r16
     cda:	fa 95       	dec	r31
     cdc:	d1 f7       	brne	.-12     	; 0xcd2 <fat16_seek+0xc>
     cde:	f0 2d       	mov	r31, r0
     ce0:	00 93 e9 02 	sts	0x02E9, r16	; 0x8002e9 <sd_sector>
     ce4:	10 93 ea 02 	sts	0x02EA, r17	; 0x8002ea <sd_sector+0x1>
     ce8:	20 93 eb 02 	sts	0x02EB, r18	; 0x8002eb <sd_sector+0x2>
     cec:	30 93 ec 02 	sts	0x02EC, r19	; 0x8002ec <sd_sector+0x3>
	sd_pos = offset & 0x1FF;
     cf0:	71 70       	andi	r23, 0x01	; 1
     cf2:	70 93 ee 02 	sts	0x02EE, r23	; 0x8002ee <sd_pos+0x1>
     cf6:	60 93 ed 02 	sts	0x02ED, r22	; 0x8002ed <sd_pos>
}
     cfa:	1f 91       	pop	r17
     cfc:	0f 91       	pop	r16
     cfe:	08 95       	ret

00000d00 <fat16_read>:

char fat16_read(unsigned char bytes) {
     d00:	ef 92       	push	r14
     d02:	ff 92       	push	r15
     d04:	0f 93       	push	r16
     d06:	1f 93       	push	r17
     d08:	cf 93       	push	r28
     d0a:	c8 2f       	mov	r28, r24
	SD_read(sd_sector, sd_pos, fat16_buffer, bytes);
     d0c:	e8 2e       	mov	r14, r24
     d0e:	f1 2c       	mov	r15, r1
     d10:	40 91 ed 02 	lds	r20, 0x02ED	; 0x8002ed <sd_pos>
     d14:	50 91 ee 02 	lds	r21, 0x02EE	; 0x8002ee <sd_pos+0x1>
     d18:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <sd_sector>
     d1c:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <sd_sector+0x1>
     d20:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <sd_sector+0x2>
     d24:	90 91 ec 02 	lds	r25, 0x02EC	; 0x8002ec <sd_sector+0x3>
     d28:	87 01       	movw	r16, r14
     d2a:	26 eb       	ldi	r18, 0xB6	; 182
     d2c:	32 e0       	ldi	r19, 0x02	; 2
     d2e:	0e 94 c3 05 	call	0xb86	; 0xb86 <SD_read>
	sd_pos+=(unsigned short)bytes;
     d32:	20 91 ed 02 	lds	r18, 0x02ED	; 0x8002ed <sd_pos>
     d36:	30 91 ee 02 	lds	r19, 0x02EE	; 0x8002ee <sd_pos+0x1>
     d3a:	02 0f       	add	r16, r18
     d3c:	13 1f       	adc	r17, r19
	
	if(sd_pos == 512) {
     d3e:	01 15       	cp	r16, r1
     d40:	82 e0       	ldi	r24, 0x02	; 2
     d42:	18 07       	cpc	r17, r24
     d44:	29 f0       	breq	.+10     	; 0xd50 <fat16_read+0x50>
	sd_pos = offset & 0x1FF;
}

char fat16_read(unsigned char bytes) {
	SD_read(sd_sector, sd_pos, fat16_buffer, bytes);
	sd_pos+=(unsigned short)bytes;
     d46:	10 93 ee 02 	sts	0x02EE, r17	; 0x8002ee <sd_pos+0x1>
     d4a:	00 93 ed 02 	sts	0x02ED, r16	; 0x8002ed <sd_pos>
     d4e:	17 c0       	rjmp	.+46     	; 0xd7e <fat16_read+0x7e>
	
	if(sd_pos == 512) {
		sd_pos = 0;
     d50:	10 92 ee 02 	sts	0x02EE, r1	; 0x8002ee <sd_pos+0x1>
     d54:	10 92 ed 02 	sts	0x02ED, r1	; 0x8002ed <sd_pos>
		sd_sector++;
     d58:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <sd_sector>
     d5c:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <sd_sector+0x1>
     d60:	a0 91 eb 02 	lds	r26, 0x02EB	; 0x8002eb <sd_sector+0x2>
     d64:	b0 91 ec 02 	lds	r27, 0x02EC	; 0x8002ec <sd_sector+0x3>
     d68:	01 96       	adiw	r24, 0x01	; 1
     d6a:	a1 1d       	adc	r26, r1
     d6c:	b1 1d       	adc	r27, r1
     d6e:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <sd_sector>
     d72:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <sd_sector+0x1>
     d76:	a0 93 eb 02 	sts	0x02EB, r26	; 0x8002eb <sd_sector+0x2>
     d7a:	b0 93 ec 02 	sts	0x02EC, r27	; 0x8002ec <sd_sector+0x3>
	}
	
	return bytes;
     d7e:	8c 2f       	mov	r24, r28
     d80:	cf 91       	pop	r28
     d82:	1f 91       	pop	r17
     d84:	0f 91       	pop	r16
     d86:	ff 90       	pop	r15
     d88:	ef 90       	pop	r14
     d8a:	08 95       	ret

00000d8c <__umulhisi3>:
     d8c:	a2 9f       	mul	r26, r18
     d8e:	b0 01       	movw	r22, r0
     d90:	b3 9f       	mul	r27, r19
     d92:	c0 01       	movw	r24, r0
     d94:	a3 9f       	mul	r26, r19
     d96:	70 0d       	add	r23, r0
     d98:	81 1d       	adc	r24, r1
     d9a:	11 24       	eor	r1, r1
     d9c:	91 1d       	adc	r25, r1
     d9e:	b2 9f       	mul	r27, r18
     da0:	70 0d       	add	r23, r0
     da2:	81 1d       	adc	r24, r1
     da4:	11 24       	eor	r1, r1
     da6:	91 1d       	adc	r25, r1
     da8:	08 95       	ret

00000daa <__muluhisi3>:
     daa:	0e 94 c6 06 	call	0xd8c	; 0xd8c <__umulhisi3>
     dae:	a5 9f       	mul	r26, r21
     db0:	90 0d       	add	r25, r0
     db2:	b4 9f       	mul	r27, r20
     db4:	90 0d       	add	r25, r0
     db6:	a4 9f       	mul	r26, r20
     db8:	80 0d       	add	r24, r0
     dba:	91 1d       	adc	r25, r1
     dbc:	11 24       	eor	r1, r1
     dbe:	08 95       	ret

00000dc0 <fputc>:
     dc0:	0f 93       	push	r16
     dc2:	1f 93       	push	r17
     dc4:	cf 93       	push	r28
     dc6:	df 93       	push	r29
     dc8:	fb 01       	movw	r30, r22
     dca:	23 81       	ldd	r18, Z+3	; 0x03
     dcc:	21 fd       	sbrc	r18, 1
     dce:	03 c0       	rjmp	.+6      	; 0xdd6 <fputc+0x16>
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	9f ef       	ldi	r25, 0xFF	; 255
     dd4:	28 c0       	rjmp	.+80     	; 0xe26 <fputc+0x66>
     dd6:	22 ff       	sbrs	r18, 2
     dd8:	16 c0       	rjmp	.+44     	; 0xe06 <fputc+0x46>
     dda:	46 81       	ldd	r20, Z+6	; 0x06
     ddc:	57 81       	ldd	r21, Z+7	; 0x07
     dde:	24 81       	ldd	r18, Z+4	; 0x04
     de0:	35 81       	ldd	r19, Z+5	; 0x05
     de2:	42 17       	cp	r20, r18
     de4:	53 07       	cpc	r21, r19
     de6:	44 f4       	brge	.+16     	; 0xdf8 <fputc+0x38>
     de8:	a0 81       	ld	r26, Z
     dea:	b1 81       	ldd	r27, Z+1	; 0x01
     dec:	9d 01       	movw	r18, r26
     dee:	2f 5f       	subi	r18, 0xFF	; 255
     df0:	3f 4f       	sbci	r19, 0xFF	; 255
     df2:	31 83       	std	Z+1, r19	; 0x01
     df4:	20 83       	st	Z, r18
     df6:	8c 93       	st	X, r24
     df8:	26 81       	ldd	r18, Z+6	; 0x06
     dfa:	37 81       	ldd	r19, Z+7	; 0x07
     dfc:	2f 5f       	subi	r18, 0xFF	; 255
     dfe:	3f 4f       	sbci	r19, 0xFF	; 255
     e00:	37 83       	std	Z+7, r19	; 0x07
     e02:	26 83       	std	Z+6, r18	; 0x06
     e04:	10 c0       	rjmp	.+32     	; 0xe26 <fputc+0x66>
     e06:	eb 01       	movw	r28, r22
     e08:	09 2f       	mov	r16, r25
     e0a:	18 2f       	mov	r17, r24
     e0c:	00 84       	ldd	r0, Z+8	; 0x08
     e0e:	f1 85       	ldd	r31, Z+9	; 0x09
     e10:	e0 2d       	mov	r30, r0
     e12:	09 95       	icall
     e14:	89 2b       	or	r24, r25
     e16:	e1 f6       	brne	.-72     	; 0xdd0 <fputc+0x10>
     e18:	8e 81       	ldd	r24, Y+6	; 0x06
     e1a:	9f 81       	ldd	r25, Y+7	; 0x07
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	9f 83       	std	Y+7, r25	; 0x07
     e20:	8e 83       	std	Y+6, r24	; 0x06
     e22:	81 2f       	mov	r24, r17
     e24:	90 2f       	mov	r25, r16
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	08 95       	ret

00000e30 <printf>:
     e30:	a0 e0       	ldi	r26, 0x00	; 0
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ee e1       	ldi	r30, 0x1E	; 30
     e36:	f7 e0       	ldi	r31, 0x07	; 7
     e38:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__prologue_saves__+0x20>
     e3c:	ae 01       	movw	r20, r28
     e3e:	4b 5f       	subi	r20, 0xFB	; 251
     e40:	5f 4f       	sbci	r21, 0xFF	; 255
     e42:	fa 01       	movw	r30, r20
     e44:	61 91       	ld	r22, Z+
     e46:	71 91       	ld	r23, Z+
     e48:	af 01       	movw	r20, r30
     e4a:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <__iob+0x2>
     e4e:	90 91 f2 02 	lds	r25, 0x02F2	; 0x8002f2 <__iob+0x3>
     e52:	0e 94 65 07 	call	0xeca	; 0xeca <vfprintf>
     e56:	e2 e0       	ldi	r30, 0x02	; 2
     e58:	0c 94 d7 09 	jmp	0x13ae	; 0x13ae <__epilogue_restores__+0x20>

00000e5c <putchar>:
     e5c:	60 91 f1 02 	lds	r22, 0x02F1	; 0x8002f1 <__iob+0x2>
     e60:	70 91 f2 02 	lds	r23, 0x02F2	; 0x8002f2 <__iob+0x3>
     e64:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
     e68:	08 95       	ret

00000e6a <puts>:
     e6a:	0f 93       	push	r16
     e6c:	1f 93       	push	r17
     e6e:	cf 93       	push	r28
     e70:	df 93       	push	r29
     e72:	e0 91 f1 02 	lds	r30, 0x02F1	; 0x8002f1 <__iob+0x2>
     e76:	f0 91 f2 02 	lds	r31, 0x02F2	; 0x8002f2 <__iob+0x3>
     e7a:	23 81       	ldd	r18, Z+3	; 0x03
     e7c:	21 ff       	sbrs	r18, 1
     e7e:	1b c0       	rjmp	.+54     	; 0xeb6 <puts+0x4c>
     e80:	8c 01       	movw	r16, r24
     e82:	d0 e0       	ldi	r29, 0x00	; 0
     e84:	c0 e0       	ldi	r28, 0x00	; 0
     e86:	f8 01       	movw	r30, r16
     e88:	81 91       	ld	r24, Z+
     e8a:	8f 01       	movw	r16, r30
     e8c:	60 91 f1 02 	lds	r22, 0x02F1	; 0x8002f1 <__iob+0x2>
     e90:	70 91 f2 02 	lds	r23, 0x02F2	; 0x8002f2 <__iob+0x3>
     e94:	db 01       	movw	r26, r22
     e96:	18 96       	adiw	r26, 0x08	; 8
     e98:	ed 91       	ld	r30, X+
     e9a:	fc 91       	ld	r31, X
     e9c:	19 97       	sbiw	r26, 0x09	; 9
     e9e:	88 23       	and	r24, r24
     ea0:	31 f0       	breq	.+12     	; 0xeae <puts+0x44>
     ea2:	09 95       	icall
     ea4:	89 2b       	or	r24, r25
     ea6:	79 f3       	breq	.-34     	; 0xe86 <puts+0x1c>
     ea8:	df ef       	ldi	r29, 0xFF	; 255
     eaa:	cf ef       	ldi	r28, 0xFF	; 255
     eac:	ec cf       	rjmp	.-40     	; 0xe86 <puts+0x1c>
     eae:	8a e0       	ldi	r24, 0x0A	; 10
     eb0:	09 95       	icall
     eb2:	89 2b       	or	r24, r25
     eb4:	19 f0       	breq	.+6      	; 0xebc <puts+0x52>
     eb6:	8f ef       	ldi	r24, 0xFF	; 255
     eb8:	9f ef       	ldi	r25, 0xFF	; 255
     eba:	02 c0       	rjmp	.+4      	; 0xec0 <puts+0x56>
     ebc:	8d 2f       	mov	r24, r29
     ebe:	9c 2f       	mov	r25, r28
     ec0:	df 91       	pop	r29
     ec2:	cf 91       	pop	r28
     ec4:	1f 91       	pop	r17
     ec6:	0f 91       	pop	r16
     ec8:	08 95       	ret

00000eca <vfprintf>:
     eca:	ac e0       	ldi	r26, 0x0C	; 12
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	eb e6       	ldi	r30, 0x6B	; 107
     ed0:	f7 e0       	ldi	r31, 0x07	; 7
     ed2:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <__prologue_saves__>
     ed6:	7c 01       	movw	r14, r24
     ed8:	6b 01       	movw	r12, r22
     eda:	8a 01       	movw	r16, r20
     edc:	fc 01       	movw	r30, r24
     ede:	17 82       	std	Z+7, r1	; 0x07
     ee0:	16 82       	std	Z+6, r1	; 0x06
     ee2:	83 81       	ldd	r24, Z+3	; 0x03
     ee4:	81 ff       	sbrs	r24, 1
     ee6:	bd c1       	rjmp	.+890    	; 0x1262 <vfprintf+0x398>
     ee8:	ce 01       	movw	r24, r28
     eea:	01 96       	adiw	r24, 0x01	; 1
     eec:	4c 01       	movw	r8, r24
     eee:	f7 01       	movw	r30, r14
     ef0:	93 81       	ldd	r25, Z+3	; 0x03
     ef2:	f6 01       	movw	r30, r12
     ef4:	93 fd       	sbrc	r25, 3
     ef6:	85 91       	lpm	r24, Z+
     ef8:	93 ff       	sbrs	r25, 3
     efa:	81 91       	ld	r24, Z+
     efc:	6f 01       	movw	r12, r30
     efe:	88 23       	and	r24, r24
     f00:	09 f4       	brne	.+2      	; 0xf04 <vfprintf+0x3a>
     f02:	ab c1       	rjmp	.+854    	; 0x125a <vfprintf+0x390>
     f04:	85 32       	cpi	r24, 0x25	; 37
     f06:	39 f4       	brne	.+14     	; 0xf16 <vfprintf+0x4c>
     f08:	93 fd       	sbrc	r25, 3
     f0a:	85 91       	lpm	r24, Z+
     f0c:	93 ff       	sbrs	r25, 3
     f0e:	81 91       	ld	r24, Z+
     f10:	6f 01       	movw	r12, r30
     f12:	85 32       	cpi	r24, 0x25	; 37
     f14:	29 f4       	brne	.+10     	; 0xf20 <vfprintf+0x56>
     f16:	b7 01       	movw	r22, r14
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
     f1e:	e7 cf       	rjmp	.-50     	; 0xeee <vfprintf+0x24>
     f20:	51 2c       	mov	r5, r1
     f22:	31 2c       	mov	r3, r1
     f24:	20 e0       	ldi	r18, 0x00	; 0
     f26:	20 32       	cpi	r18, 0x20	; 32
     f28:	a0 f4       	brcc	.+40     	; 0xf52 <vfprintf+0x88>
     f2a:	8b 32       	cpi	r24, 0x2B	; 43
     f2c:	69 f0       	breq	.+26     	; 0xf48 <vfprintf+0x7e>
     f2e:	30 f4       	brcc	.+12     	; 0xf3c <vfprintf+0x72>
     f30:	80 32       	cpi	r24, 0x20	; 32
     f32:	59 f0       	breq	.+22     	; 0xf4a <vfprintf+0x80>
     f34:	83 32       	cpi	r24, 0x23	; 35
     f36:	69 f4       	brne	.+26     	; 0xf52 <vfprintf+0x88>
     f38:	20 61       	ori	r18, 0x10	; 16
     f3a:	2c c0       	rjmp	.+88     	; 0xf94 <vfprintf+0xca>
     f3c:	8d 32       	cpi	r24, 0x2D	; 45
     f3e:	39 f0       	breq	.+14     	; 0xf4e <vfprintf+0x84>
     f40:	80 33       	cpi	r24, 0x30	; 48
     f42:	39 f4       	brne	.+14     	; 0xf52 <vfprintf+0x88>
     f44:	21 60       	ori	r18, 0x01	; 1
     f46:	26 c0       	rjmp	.+76     	; 0xf94 <vfprintf+0xca>
     f48:	22 60       	ori	r18, 0x02	; 2
     f4a:	24 60       	ori	r18, 0x04	; 4
     f4c:	23 c0       	rjmp	.+70     	; 0xf94 <vfprintf+0xca>
     f4e:	28 60       	ori	r18, 0x08	; 8
     f50:	21 c0       	rjmp	.+66     	; 0xf94 <vfprintf+0xca>
     f52:	27 fd       	sbrc	r18, 7
     f54:	27 c0       	rjmp	.+78     	; 0xfa4 <vfprintf+0xda>
     f56:	30 ed       	ldi	r19, 0xD0	; 208
     f58:	38 0f       	add	r19, r24
     f5a:	3a 30       	cpi	r19, 0x0A	; 10
     f5c:	78 f4       	brcc	.+30     	; 0xf7c <vfprintf+0xb2>
     f5e:	26 ff       	sbrs	r18, 6
     f60:	06 c0       	rjmp	.+12     	; 0xf6e <vfprintf+0xa4>
     f62:	fa e0       	ldi	r31, 0x0A	; 10
     f64:	5f 9e       	mul	r5, r31
     f66:	30 0d       	add	r19, r0
     f68:	11 24       	eor	r1, r1
     f6a:	53 2e       	mov	r5, r19
     f6c:	13 c0       	rjmp	.+38     	; 0xf94 <vfprintf+0xca>
     f6e:	8a e0       	ldi	r24, 0x0A	; 10
     f70:	38 9e       	mul	r3, r24
     f72:	30 0d       	add	r19, r0
     f74:	11 24       	eor	r1, r1
     f76:	33 2e       	mov	r3, r19
     f78:	20 62       	ori	r18, 0x20	; 32
     f7a:	0c c0       	rjmp	.+24     	; 0xf94 <vfprintf+0xca>
     f7c:	8e 32       	cpi	r24, 0x2E	; 46
     f7e:	21 f4       	brne	.+8      	; 0xf88 <vfprintf+0xbe>
     f80:	26 fd       	sbrc	r18, 6
     f82:	6b c1       	rjmp	.+726    	; 0x125a <vfprintf+0x390>
     f84:	20 64       	ori	r18, 0x40	; 64
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <vfprintf+0xca>
     f88:	8c 36       	cpi	r24, 0x6C	; 108
     f8a:	11 f4       	brne	.+4      	; 0xf90 <vfprintf+0xc6>
     f8c:	20 68       	ori	r18, 0x80	; 128
     f8e:	02 c0       	rjmp	.+4      	; 0xf94 <vfprintf+0xca>
     f90:	88 36       	cpi	r24, 0x68	; 104
     f92:	41 f4       	brne	.+16     	; 0xfa4 <vfprintf+0xda>
     f94:	f6 01       	movw	r30, r12
     f96:	93 fd       	sbrc	r25, 3
     f98:	85 91       	lpm	r24, Z+
     f9a:	93 ff       	sbrs	r25, 3
     f9c:	81 91       	ld	r24, Z+
     f9e:	6f 01       	movw	r12, r30
     fa0:	81 11       	cpse	r24, r1
     fa2:	c1 cf       	rjmp	.-126    	; 0xf26 <vfprintf+0x5c>
     fa4:	98 2f       	mov	r25, r24
     fa6:	9f 7d       	andi	r25, 0xDF	; 223
     fa8:	95 54       	subi	r25, 0x45	; 69
     faa:	93 30       	cpi	r25, 0x03	; 3
     fac:	28 f4       	brcc	.+10     	; 0xfb8 <vfprintf+0xee>
     fae:	0c 5f       	subi	r16, 0xFC	; 252
     fb0:	1f 4f       	sbci	r17, 0xFF	; 255
     fb2:	ff e3       	ldi	r31, 0x3F	; 63
     fb4:	f9 83       	std	Y+1, r31	; 0x01
     fb6:	0d c0       	rjmp	.+26     	; 0xfd2 <vfprintf+0x108>
     fb8:	83 36       	cpi	r24, 0x63	; 99
     fba:	31 f0       	breq	.+12     	; 0xfc8 <vfprintf+0xfe>
     fbc:	83 37       	cpi	r24, 0x73	; 115
     fbe:	71 f0       	breq	.+28     	; 0xfdc <vfprintf+0x112>
     fc0:	83 35       	cpi	r24, 0x53	; 83
     fc2:	09 f0       	breq	.+2      	; 0xfc6 <vfprintf+0xfc>
     fc4:	5b c0       	rjmp	.+182    	; 0x107c <vfprintf+0x1b2>
     fc6:	22 c0       	rjmp	.+68     	; 0x100c <vfprintf+0x142>
     fc8:	f8 01       	movw	r30, r16
     fca:	80 81       	ld	r24, Z
     fcc:	89 83       	std	Y+1, r24	; 0x01
     fce:	0e 5f       	subi	r16, 0xFE	; 254
     fd0:	1f 4f       	sbci	r17, 0xFF	; 255
     fd2:	44 24       	eor	r4, r4
     fd4:	43 94       	inc	r4
     fd6:	51 2c       	mov	r5, r1
     fd8:	54 01       	movw	r10, r8
     fda:	15 c0       	rjmp	.+42     	; 0x1006 <vfprintf+0x13c>
     fdc:	38 01       	movw	r6, r16
     fde:	f2 e0       	ldi	r31, 0x02	; 2
     fe0:	6f 0e       	add	r6, r31
     fe2:	71 1c       	adc	r7, r1
     fe4:	f8 01       	movw	r30, r16
     fe6:	a0 80       	ld	r10, Z
     fe8:	b1 80       	ldd	r11, Z+1	; 0x01
     fea:	26 ff       	sbrs	r18, 6
     fec:	03 c0       	rjmp	.+6      	; 0xff4 <vfprintf+0x12a>
     fee:	65 2d       	mov	r22, r5
     ff0:	70 e0       	ldi	r23, 0x00	; 0
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <vfprintf+0x12e>
     ff4:	6f ef       	ldi	r22, 0xFF	; 255
     ff6:	7f ef       	ldi	r23, 0xFF	; 255
     ff8:	c5 01       	movw	r24, r10
     ffa:	2c 87       	std	Y+12, r18	; 0x0c
     ffc:	0e 94 42 09 	call	0x1284	; 0x1284 <strnlen>
    1000:	2c 01       	movw	r4, r24
    1002:	83 01       	movw	r16, r6
    1004:	2c 85       	ldd	r18, Y+12	; 0x0c
    1006:	2f 77       	andi	r18, 0x7F	; 127
    1008:	22 2e       	mov	r2, r18
    100a:	17 c0       	rjmp	.+46     	; 0x103a <vfprintf+0x170>
    100c:	38 01       	movw	r6, r16
    100e:	f2 e0       	ldi	r31, 0x02	; 2
    1010:	6f 0e       	add	r6, r31
    1012:	71 1c       	adc	r7, r1
    1014:	f8 01       	movw	r30, r16
    1016:	a0 80       	ld	r10, Z
    1018:	b1 80       	ldd	r11, Z+1	; 0x01
    101a:	26 ff       	sbrs	r18, 6
    101c:	03 c0       	rjmp	.+6      	; 0x1024 <vfprintf+0x15a>
    101e:	65 2d       	mov	r22, r5
    1020:	70 e0       	ldi	r23, 0x00	; 0
    1022:	02 c0       	rjmp	.+4      	; 0x1028 <vfprintf+0x15e>
    1024:	6f ef       	ldi	r22, 0xFF	; 255
    1026:	7f ef       	ldi	r23, 0xFF	; 255
    1028:	c5 01       	movw	r24, r10
    102a:	2c 87       	std	Y+12, r18	; 0x0c
    102c:	0e 94 37 09 	call	0x126e	; 0x126e <strnlen_P>
    1030:	2c 01       	movw	r4, r24
    1032:	2c 85       	ldd	r18, Y+12	; 0x0c
    1034:	20 68       	ori	r18, 0x80	; 128
    1036:	22 2e       	mov	r2, r18
    1038:	83 01       	movw	r16, r6
    103a:	23 fc       	sbrc	r2, 3
    103c:	1b c0       	rjmp	.+54     	; 0x1074 <vfprintf+0x1aa>
    103e:	83 2d       	mov	r24, r3
    1040:	90 e0       	ldi	r25, 0x00	; 0
    1042:	48 16       	cp	r4, r24
    1044:	59 06       	cpc	r5, r25
    1046:	b0 f4       	brcc	.+44     	; 0x1074 <vfprintf+0x1aa>
    1048:	b7 01       	movw	r22, r14
    104a:	80 e2       	ldi	r24, 0x20	; 32
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
    1052:	3a 94       	dec	r3
    1054:	f4 cf       	rjmp	.-24     	; 0x103e <vfprintf+0x174>
    1056:	f5 01       	movw	r30, r10
    1058:	27 fc       	sbrc	r2, 7
    105a:	85 91       	lpm	r24, Z+
    105c:	27 fe       	sbrs	r2, 7
    105e:	81 91       	ld	r24, Z+
    1060:	5f 01       	movw	r10, r30
    1062:	b7 01       	movw	r22, r14
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
    106a:	31 10       	cpse	r3, r1
    106c:	3a 94       	dec	r3
    106e:	f1 e0       	ldi	r31, 0x01	; 1
    1070:	4f 1a       	sub	r4, r31
    1072:	51 08       	sbc	r5, r1
    1074:	41 14       	cp	r4, r1
    1076:	51 04       	cpc	r5, r1
    1078:	71 f7       	brne	.-36     	; 0x1056 <vfprintf+0x18c>
    107a:	e5 c0       	rjmp	.+458    	; 0x1246 <vfprintf+0x37c>
    107c:	84 36       	cpi	r24, 0x64	; 100
    107e:	11 f0       	breq	.+4      	; 0x1084 <vfprintf+0x1ba>
    1080:	89 36       	cpi	r24, 0x69	; 105
    1082:	39 f5       	brne	.+78     	; 0x10d2 <vfprintf+0x208>
    1084:	f8 01       	movw	r30, r16
    1086:	27 ff       	sbrs	r18, 7
    1088:	07 c0       	rjmp	.+14     	; 0x1098 <vfprintf+0x1ce>
    108a:	60 81       	ld	r22, Z
    108c:	71 81       	ldd	r23, Z+1	; 0x01
    108e:	82 81       	ldd	r24, Z+2	; 0x02
    1090:	93 81       	ldd	r25, Z+3	; 0x03
    1092:	0c 5f       	subi	r16, 0xFC	; 252
    1094:	1f 4f       	sbci	r17, 0xFF	; 255
    1096:	08 c0       	rjmp	.+16     	; 0x10a8 <vfprintf+0x1de>
    1098:	60 81       	ld	r22, Z
    109a:	71 81       	ldd	r23, Z+1	; 0x01
    109c:	07 2e       	mov	r0, r23
    109e:	00 0c       	add	r0, r0
    10a0:	88 0b       	sbc	r24, r24
    10a2:	99 0b       	sbc	r25, r25
    10a4:	0e 5f       	subi	r16, 0xFE	; 254
    10a6:	1f 4f       	sbci	r17, 0xFF	; 255
    10a8:	2f 76       	andi	r18, 0x6F	; 111
    10aa:	72 2e       	mov	r7, r18
    10ac:	97 ff       	sbrs	r25, 7
    10ae:	09 c0       	rjmp	.+18     	; 0x10c2 <vfprintf+0x1f8>
    10b0:	90 95       	com	r25
    10b2:	80 95       	com	r24
    10b4:	70 95       	com	r23
    10b6:	61 95       	neg	r22
    10b8:	7f 4f       	sbci	r23, 0xFF	; 255
    10ba:	8f 4f       	sbci	r24, 0xFF	; 255
    10bc:	9f 4f       	sbci	r25, 0xFF	; 255
    10be:	20 68       	ori	r18, 0x80	; 128
    10c0:	72 2e       	mov	r7, r18
    10c2:	2a e0       	ldi	r18, 0x0A	; 10
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	a4 01       	movw	r20, r8
    10c8:	0e 94 4d 09 	call	0x129a	; 0x129a <__ultoa_invert>
    10cc:	a8 2e       	mov	r10, r24
    10ce:	a8 18       	sub	r10, r8
    10d0:	44 c0       	rjmp	.+136    	; 0x115a <vfprintf+0x290>
    10d2:	85 37       	cpi	r24, 0x75	; 117
    10d4:	29 f4       	brne	.+10     	; 0x10e0 <vfprintf+0x216>
    10d6:	2f 7e       	andi	r18, 0xEF	; 239
    10d8:	b2 2e       	mov	r11, r18
    10da:	2a e0       	ldi	r18, 0x0A	; 10
    10dc:	30 e0       	ldi	r19, 0x00	; 0
    10de:	25 c0       	rjmp	.+74     	; 0x112a <vfprintf+0x260>
    10e0:	f2 2f       	mov	r31, r18
    10e2:	f9 7f       	andi	r31, 0xF9	; 249
    10e4:	bf 2e       	mov	r11, r31
    10e6:	8f 36       	cpi	r24, 0x6F	; 111
    10e8:	c1 f0       	breq	.+48     	; 0x111a <vfprintf+0x250>
    10ea:	18 f4       	brcc	.+6      	; 0x10f2 <vfprintf+0x228>
    10ec:	88 35       	cpi	r24, 0x58	; 88
    10ee:	79 f0       	breq	.+30     	; 0x110e <vfprintf+0x244>
    10f0:	b4 c0       	rjmp	.+360    	; 0x125a <vfprintf+0x390>
    10f2:	80 37       	cpi	r24, 0x70	; 112
    10f4:	19 f0       	breq	.+6      	; 0x10fc <vfprintf+0x232>
    10f6:	88 37       	cpi	r24, 0x78	; 120
    10f8:	21 f0       	breq	.+8      	; 0x1102 <vfprintf+0x238>
    10fa:	af c0       	rjmp	.+350    	; 0x125a <vfprintf+0x390>
    10fc:	2f 2f       	mov	r18, r31
    10fe:	20 61       	ori	r18, 0x10	; 16
    1100:	b2 2e       	mov	r11, r18
    1102:	b4 fe       	sbrs	r11, 4
    1104:	0d c0       	rjmp	.+26     	; 0x1120 <vfprintf+0x256>
    1106:	8b 2d       	mov	r24, r11
    1108:	84 60       	ori	r24, 0x04	; 4
    110a:	b8 2e       	mov	r11, r24
    110c:	09 c0       	rjmp	.+18     	; 0x1120 <vfprintf+0x256>
    110e:	24 ff       	sbrs	r18, 4
    1110:	0a c0       	rjmp	.+20     	; 0x1126 <vfprintf+0x25c>
    1112:	9f 2f       	mov	r25, r31
    1114:	96 60       	ori	r25, 0x06	; 6
    1116:	b9 2e       	mov	r11, r25
    1118:	06 c0       	rjmp	.+12     	; 0x1126 <vfprintf+0x25c>
    111a:	28 e0       	ldi	r18, 0x08	; 8
    111c:	30 e0       	ldi	r19, 0x00	; 0
    111e:	05 c0       	rjmp	.+10     	; 0x112a <vfprintf+0x260>
    1120:	20 e1       	ldi	r18, 0x10	; 16
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	02 c0       	rjmp	.+4      	; 0x112a <vfprintf+0x260>
    1126:	20 e1       	ldi	r18, 0x10	; 16
    1128:	32 e0       	ldi	r19, 0x02	; 2
    112a:	f8 01       	movw	r30, r16
    112c:	b7 fe       	sbrs	r11, 7
    112e:	07 c0       	rjmp	.+14     	; 0x113e <vfprintf+0x274>
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	82 81       	ldd	r24, Z+2	; 0x02
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	0c 5f       	subi	r16, 0xFC	; 252
    113a:	1f 4f       	sbci	r17, 0xFF	; 255
    113c:	06 c0       	rjmp	.+12     	; 0x114a <vfprintf+0x280>
    113e:	60 81       	ld	r22, Z
    1140:	71 81       	ldd	r23, Z+1	; 0x01
    1142:	80 e0       	ldi	r24, 0x00	; 0
    1144:	90 e0       	ldi	r25, 0x00	; 0
    1146:	0e 5f       	subi	r16, 0xFE	; 254
    1148:	1f 4f       	sbci	r17, 0xFF	; 255
    114a:	a4 01       	movw	r20, r8
    114c:	0e 94 4d 09 	call	0x129a	; 0x129a <__ultoa_invert>
    1150:	a8 2e       	mov	r10, r24
    1152:	a8 18       	sub	r10, r8
    1154:	fb 2d       	mov	r31, r11
    1156:	ff 77       	andi	r31, 0x7F	; 127
    1158:	7f 2e       	mov	r7, r31
    115a:	76 fe       	sbrs	r7, 6
    115c:	0b c0       	rjmp	.+22     	; 0x1174 <vfprintf+0x2aa>
    115e:	37 2d       	mov	r19, r7
    1160:	3e 7f       	andi	r19, 0xFE	; 254
    1162:	a5 14       	cp	r10, r5
    1164:	50 f4       	brcc	.+20     	; 0x117a <vfprintf+0x2b0>
    1166:	74 fe       	sbrs	r7, 4
    1168:	0a c0       	rjmp	.+20     	; 0x117e <vfprintf+0x2b4>
    116a:	72 fc       	sbrc	r7, 2
    116c:	08 c0       	rjmp	.+16     	; 0x117e <vfprintf+0x2b4>
    116e:	37 2d       	mov	r19, r7
    1170:	3e 7e       	andi	r19, 0xEE	; 238
    1172:	05 c0       	rjmp	.+10     	; 0x117e <vfprintf+0x2b4>
    1174:	ba 2c       	mov	r11, r10
    1176:	37 2d       	mov	r19, r7
    1178:	03 c0       	rjmp	.+6      	; 0x1180 <vfprintf+0x2b6>
    117a:	ba 2c       	mov	r11, r10
    117c:	01 c0       	rjmp	.+2      	; 0x1180 <vfprintf+0x2b6>
    117e:	b5 2c       	mov	r11, r5
    1180:	34 ff       	sbrs	r19, 4
    1182:	0d c0       	rjmp	.+26     	; 0x119e <vfprintf+0x2d4>
    1184:	fe 01       	movw	r30, r28
    1186:	ea 0d       	add	r30, r10
    1188:	f1 1d       	adc	r31, r1
    118a:	80 81       	ld	r24, Z
    118c:	80 33       	cpi	r24, 0x30	; 48
    118e:	11 f4       	brne	.+4      	; 0x1194 <vfprintf+0x2ca>
    1190:	39 7e       	andi	r19, 0xE9	; 233
    1192:	09 c0       	rjmp	.+18     	; 0x11a6 <vfprintf+0x2dc>
    1194:	32 ff       	sbrs	r19, 2
    1196:	06 c0       	rjmp	.+12     	; 0x11a4 <vfprintf+0x2da>
    1198:	b3 94       	inc	r11
    119a:	b3 94       	inc	r11
    119c:	04 c0       	rjmp	.+8      	; 0x11a6 <vfprintf+0x2dc>
    119e:	83 2f       	mov	r24, r19
    11a0:	86 78       	andi	r24, 0x86	; 134
    11a2:	09 f0       	breq	.+2      	; 0x11a6 <vfprintf+0x2dc>
    11a4:	b3 94       	inc	r11
    11a6:	33 fd       	sbrc	r19, 3
    11a8:	13 c0       	rjmp	.+38     	; 0x11d0 <vfprintf+0x306>
    11aa:	30 ff       	sbrs	r19, 0
    11ac:	06 c0       	rjmp	.+12     	; 0x11ba <vfprintf+0x2f0>
    11ae:	5a 2c       	mov	r5, r10
    11b0:	b3 14       	cp	r11, r3
    11b2:	18 f4       	brcc	.+6      	; 0x11ba <vfprintf+0x2f0>
    11b4:	53 0c       	add	r5, r3
    11b6:	5b 18       	sub	r5, r11
    11b8:	b3 2c       	mov	r11, r3
    11ba:	b3 14       	cp	r11, r3
    11bc:	68 f4       	brcc	.+26     	; 0x11d8 <vfprintf+0x30e>
    11be:	b7 01       	movw	r22, r14
    11c0:	80 e2       	ldi	r24, 0x20	; 32
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	3c 87       	std	Y+12, r19	; 0x0c
    11c6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
    11ca:	b3 94       	inc	r11
    11cc:	3c 85       	ldd	r19, Y+12	; 0x0c
    11ce:	f5 cf       	rjmp	.-22     	; 0x11ba <vfprintf+0x2f0>
    11d0:	b3 14       	cp	r11, r3
    11d2:	10 f4       	brcc	.+4      	; 0x11d8 <vfprintf+0x30e>
    11d4:	3b 18       	sub	r3, r11
    11d6:	01 c0       	rjmp	.+2      	; 0x11da <vfprintf+0x310>
    11d8:	31 2c       	mov	r3, r1
    11da:	34 ff       	sbrs	r19, 4
    11dc:	12 c0       	rjmp	.+36     	; 0x1202 <vfprintf+0x338>
    11de:	b7 01       	movw	r22, r14
    11e0:	80 e3       	ldi	r24, 0x30	; 48
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	3c 87       	std	Y+12, r19	; 0x0c
    11e6:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
    11ea:	3c 85       	ldd	r19, Y+12	; 0x0c
    11ec:	32 ff       	sbrs	r19, 2
    11ee:	17 c0       	rjmp	.+46     	; 0x121e <vfprintf+0x354>
    11f0:	31 fd       	sbrc	r19, 1
    11f2:	03 c0       	rjmp	.+6      	; 0x11fa <vfprintf+0x330>
    11f4:	88 e7       	ldi	r24, 0x78	; 120
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 c0       	rjmp	.+4      	; 0x11fe <vfprintf+0x334>
    11fa:	88 e5       	ldi	r24, 0x58	; 88
    11fc:	90 e0       	ldi	r25, 0x00	; 0
    11fe:	b7 01       	movw	r22, r14
    1200:	0c c0       	rjmp	.+24     	; 0x121a <vfprintf+0x350>
    1202:	83 2f       	mov	r24, r19
    1204:	86 78       	andi	r24, 0x86	; 134
    1206:	59 f0       	breq	.+22     	; 0x121e <vfprintf+0x354>
    1208:	31 ff       	sbrs	r19, 1
    120a:	02 c0       	rjmp	.+4      	; 0x1210 <vfprintf+0x346>
    120c:	8b e2       	ldi	r24, 0x2B	; 43
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <vfprintf+0x348>
    1210:	80 e2       	ldi	r24, 0x20	; 32
    1212:	37 fd       	sbrc	r19, 7
    1214:	8d e2       	ldi	r24, 0x2D	; 45
    1216:	b7 01       	movw	r22, r14
    1218:	90 e0       	ldi	r25, 0x00	; 0
    121a:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
    121e:	a5 14       	cp	r10, r5
    1220:	38 f4       	brcc	.+14     	; 0x1230 <vfprintf+0x366>
    1222:	b7 01       	movw	r22, r14
    1224:	80 e3       	ldi	r24, 0x30	; 48
    1226:	90 e0       	ldi	r25, 0x00	; 0
    1228:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
    122c:	5a 94       	dec	r5
    122e:	f7 cf       	rjmp	.-18     	; 0x121e <vfprintf+0x354>
    1230:	aa 94       	dec	r10
    1232:	f4 01       	movw	r30, r8
    1234:	ea 0d       	add	r30, r10
    1236:	f1 1d       	adc	r31, r1
    1238:	80 81       	ld	r24, Z
    123a:	b7 01       	movw	r22, r14
    123c:	90 e0       	ldi	r25, 0x00	; 0
    123e:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
    1242:	a1 10       	cpse	r10, r1
    1244:	f5 cf       	rjmp	.-22     	; 0x1230 <vfprintf+0x366>
    1246:	33 20       	and	r3, r3
    1248:	09 f4       	brne	.+2      	; 0x124c <vfprintf+0x382>
    124a:	51 ce       	rjmp	.-862    	; 0xeee <vfprintf+0x24>
    124c:	b7 01       	movw	r22, r14
    124e:	80 e2       	ldi	r24, 0x20	; 32
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	0e 94 e0 06 	call	0xdc0	; 0xdc0 <fputc>
    1256:	3a 94       	dec	r3
    1258:	f6 cf       	rjmp	.-20     	; 0x1246 <vfprintf+0x37c>
    125a:	f7 01       	movw	r30, r14
    125c:	86 81       	ldd	r24, Z+6	; 0x06
    125e:	97 81       	ldd	r25, Z+7	; 0x07
    1260:	02 c0       	rjmp	.+4      	; 0x1266 <vfprintf+0x39c>
    1262:	8f ef       	ldi	r24, 0xFF	; 255
    1264:	9f ef       	ldi	r25, 0xFF	; 255
    1266:	2c 96       	adiw	r28, 0x0c	; 12
    1268:	e2 e1       	ldi	r30, 0x12	; 18
    126a:	0c 94 c7 09 	jmp	0x138e	; 0x138e <__epilogue_restores__>

0000126e <strnlen_P>:
    126e:	fc 01       	movw	r30, r24
    1270:	05 90       	lpm	r0, Z+
    1272:	61 50       	subi	r22, 0x01	; 1
    1274:	70 40       	sbci	r23, 0x00	; 0
    1276:	01 10       	cpse	r0, r1
    1278:	d8 f7       	brcc	.-10     	; 0x1270 <strnlen_P+0x2>
    127a:	80 95       	com	r24
    127c:	90 95       	com	r25
    127e:	8e 0f       	add	r24, r30
    1280:	9f 1f       	adc	r25, r31
    1282:	08 95       	ret

00001284 <strnlen>:
    1284:	fc 01       	movw	r30, r24
    1286:	61 50       	subi	r22, 0x01	; 1
    1288:	70 40       	sbci	r23, 0x00	; 0
    128a:	01 90       	ld	r0, Z+
    128c:	01 10       	cpse	r0, r1
    128e:	d8 f7       	brcc	.-10     	; 0x1286 <strnlen+0x2>
    1290:	80 95       	com	r24
    1292:	90 95       	com	r25
    1294:	8e 0f       	add	r24, r30
    1296:	9f 1f       	adc	r25, r31
    1298:	08 95       	ret

0000129a <__ultoa_invert>:
    129a:	fa 01       	movw	r30, r20
    129c:	aa 27       	eor	r26, r26
    129e:	28 30       	cpi	r18, 0x08	; 8
    12a0:	51 f1       	breq	.+84     	; 0x12f6 <__ultoa_invert+0x5c>
    12a2:	20 31       	cpi	r18, 0x10	; 16
    12a4:	81 f1       	breq	.+96     	; 0x1306 <__ultoa_invert+0x6c>
    12a6:	e8 94       	clt
    12a8:	6f 93       	push	r22
    12aa:	6e 7f       	andi	r22, 0xFE	; 254
    12ac:	6e 5f       	subi	r22, 0xFE	; 254
    12ae:	7f 4f       	sbci	r23, 0xFF	; 255
    12b0:	8f 4f       	sbci	r24, 0xFF	; 255
    12b2:	9f 4f       	sbci	r25, 0xFF	; 255
    12b4:	af 4f       	sbci	r26, 0xFF	; 255
    12b6:	b1 e0       	ldi	r27, 0x01	; 1
    12b8:	3e d0       	rcall	.+124    	; 0x1336 <__ultoa_invert+0x9c>
    12ba:	b4 e0       	ldi	r27, 0x04	; 4
    12bc:	3c d0       	rcall	.+120    	; 0x1336 <__ultoa_invert+0x9c>
    12be:	67 0f       	add	r22, r23
    12c0:	78 1f       	adc	r23, r24
    12c2:	89 1f       	adc	r24, r25
    12c4:	9a 1f       	adc	r25, r26
    12c6:	a1 1d       	adc	r26, r1
    12c8:	68 0f       	add	r22, r24
    12ca:	79 1f       	adc	r23, r25
    12cc:	8a 1f       	adc	r24, r26
    12ce:	91 1d       	adc	r25, r1
    12d0:	a1 1d       	adc	r26, r1
    12d2:	6a 0f       	add	r22, r26
    12d4:	71 1d       	adc	r23, r1
    12d6:	81 1d       	adc	r24, r1
    12d8:	91 1d       	adc	r25, r1
    12da:	a1 1d       	adc	r26, r1
    12dc:	20 d0       	rcall	.+64     	; 0x131e <__ultoa_invert+0x84>
    12de:	09 f4       	brne	.+2      	; 0x12e2 <__ultoa_invert+0x48>
    12e0:	68 94       	set
    12e2:	3f 91       	pop	r19
    12e4:	2a e0       	ldi	r18, 0x0A	; 10
    12e6:	26 9f       	mul	r18, r22
    12e8:	11 24       	eor	r1, r1
    12ea:	30 19       	sub	r19, r0
    12ec:	30 5d       	subi	r19, 0xD0	; 208
    12ee:	31 93       	st	Z+, r19
    12f0:	de f6       	brtc	.-74     	; 0x12a8 <__ultoa_invert+0xe>
    12f2:	cf 01       	movw	r24, r30
    12f4:	08 95       	ret
    12f6:	46 2f       	mov	r20, r22
    12f8:	47 70       	andi	r20, 0x07	; 7
    12fa:	40 5d       	subi	r20, 0xD0	; 208
    12fc:	41 93       	st	Z+, r20
    12fe:	b3 e0       	ldi	r27, 0x03	; 3
    1300:	0f d0       	rcall	.+30     	; 0x1320 <__ultoa_invert+0x86>
    1302:	c9 f7       	brne	.-14     	; 0x12f6 <__ultoa_invert+0x5c>
    1304:	f6 cf       	rjmp	.-20     	; 0x12f2 <__ultoa_invert+0x58>
    1306:	46 2f       	mov	r20, r22
    1308:	4f 70       	andi	r20, 0x0F	; 15
    130a:	40 5d       	subi	r20, 0xD0	; 208
    130c:	4a 33       	cpi	r20, 0x3A	; 58
    130e:	18 f0       	brcs	.+6      	; 0x1316 <__ultoa_invert+0x7c>
    1310:	49 5d       	subi	r20, 0xD9	; 217
    1312:	31 fd       	sbrc	r19, 1
    1314:	40 52       	subi	r20, 0x20	; 32
    1316:	41 93       	st	Z+, r20
    1318:	02 d0       	rcall	.+4      	; 0x131e <__ultoa_invert+0x84>
    131a:	a9 f7       	brne	.-22     	; 0x1306 <__ultoa_invert+0x6c>
    131c:	ea cf       	rjmp	.-44     	; 0x12f2 <__ultoa_invert+0x58>
    131e:	b4 e0       	ldi	r27, 0x04	; 4
    1320:	a6 95       	lsr	r26
    1322:	97 95       	ror	r25
    1324:	87 95       	ror	r24
    1326:	77 95       	ror	r23
    1328:	67 95       	ror	r22
    132a:	ba 95       	dec	r27
    132c:	c9 f7       	brne	.-14     	; 0x1320 <__ultoa_invert+0x86>
    132e:	00 97       	sbiw	r24, 0x00	; 0
    1330:	61 05       	cpc	r22, r1
    1332:	71 05       	cpc	r23, r1
    1334:	08 95       	ret
    1336:	9b 01       	movw	r18, r22
    1338:	ac 01       	movw	r20, r24
    133a:	0a 2e       	mov	r0, r26
    133c:	06 94       	lsr	r0
    133e:	57 95       	ror	r21
    1340:	47 95       	ror	r20
    1342:	37 95       	ror	r19
    1344:	27 95       	ror	r18
    1346:	ba 95       	dec	r27
    1348:	c9 f7       	brne	.-14     	; 0x133c <__ultoa_invert+0xa2>
    134a:	62 0f       	add	r22, r18
    134c:	73 1f       	adc	r23, r19
    134e:	84 1f       	adc	r24, r20
    1350:	95 1f       	adc	r25, r21
    1352:	a0 1d       	adc	r26, r0
    1354:	08 95       	ret

00001356 <__prologue_saves__>:
    1356:	2f 92       	push	r2
    1358:	3f 92       	push	r3
    135a:	4f 92       	push	r4
    135c:	5f 92       	push	r5
    135e:	6f 92       	push	r6
    1360:	7f 92       	push	r7
    1362:	8f 92       	push	r8
    1364:	9f 92       	push	r9
    1366:	af 92       	push	r10
    1368:	bf 92       	push	r11
    136a:	cf 92       	push	r12
    136c:	df 92       	push	r13
    136e:	ef 92       	push	r14
    1370:	ff 92       	push	r15
    1372:	0f 93       	push	r16
    1374:	1f 93       	push	r17
    1376:	cf 93       	push	r28
    1378:	df 93       	push	r29
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	ca 1b       	sub	r28, r26
    1380:	db 0b       	sbc	r29, r27
    1382:	0f b6       	in	r0, 0x3f	; 63
    1384:	f8 94       	cli
    1386:	de bf       	out	0x3e, r29	; 62
    1388:	0f be       	out	0x3f, r0	; 63
    138a:	cd bf       	out	0x3d, r28	; 61
    138c:	09 94       	ijmp

0000138e <__epilogue_restores__>:
    138e:	2a 88       	ldd	r2, Y+18	; 0x12
    1390:	39 88       	ldd	r3, Y+17	; 0x11
    1392:	48 88       	ldd	r4, Y+16	; 0x10
    1394:	5f 84       	ldd	r5, Y+15	; 0x0f
    1396:	6e 84       	ldd	r6, Y+14	; 0x0e
    1398:	7d 84       	ldd	r7, Y+13	; 0x0d
    139a:	8c 84       	ldd	r8, Y+12	; 0x0c
    139c:	9b 84       	ldd	r9, Y+11	; 0x0b
    139e:	aa 84       	ldd	r10, Y+10	; 0x0a
    13a0:	b9 84       	ldd	r11, Y+9	; 0x09
    13a2:	c8 84       	ldd	r12, Y+8	; 0x08
    13a4:	df 80       	ldd	r13, Y+7	; 0x07
    13a6:	ee 80       	ldd	r14, Y+6	; 0x06
    13a8:	fd 80       	ldd	r15, Y+5	; 0x05
    13aa:	0c 81       	ldd	r16, Y+4	; 0x04
    13ac:	1b 81       	ldd	r17, Y+3	; 0x03
    13ae:	aa 81       	ldd	r26, Y+2	; 0x02
    13b0:	b9 81       	ldd	r27, Y+1	; 0x01
    13b2:	ce 0f       	add	r28, r30
    13b4:	d1 1d       	adc	r29, r1
    13b6:	0f b6       	in	r0, 0x3f	; 63
    13b8:	f8 94       	cli
    13ba:	de bf       	out	0x3e, r29	; 62
    13bc:	0f be       	out	0x3f, r0	; 63
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	ed 01       	movw	r28, r26
    13c2:	08 95       	ret

000013c4 <_exit>:
    13c4:	f8 94       	cli

000013c6 <__stop_program>:
    13c6:	ff cf       	rjmp	.-2      	; 0x13c6 <__stop_program>
